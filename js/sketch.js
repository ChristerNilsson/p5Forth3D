// Generated by CoffeeScript 1.11.1
var N, SIZE, buildCommands, calc, cmd0, cmd1, cmd2, digit, draw, evaluate, fillSelect, i, j, k, lightX, lightY, mousePressed, pg, sel1click, sel2click, sel3click, sel4click, sel5click, sel6click, sel7click, sel8click, setup, showError, showStack, stack, t, tableAppend, tableClear, timestamp, trace, words, xVinkel, yVinkel,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

N = 10;

SIZE = 250 / N;

pg = Array(N * N * N);

lightX = 0;

lightY = 0;

cmd0 = {};

cmd1 = {};

cmd2 = {};

stack = [];

i = 0;

j = 0;

k = 0;

t = 0;

xVinkel = 0;

yVinkel = 0;

timestamp = 0;

words = {};

fillSelect = function(sel, arr) {
  var key, l, len, results;
  sel.empty();
  results = [];
  for (l = 0, len = arr.length; l < len; l++) {
    key = arr[l];
    results.push(sel.append($("<option>").attr('value', key).text(key)));
  }
  return results;
};

sel1click = function(sel) {};

sel2click = function(sel) {};

sel3click = function(sel) {
  print(sel.value);
  return frameRate(int(sel.value));
};

sel4click = function(sel) {};

sel5click = function(sel) {
  return trace();
};

sel6click = function(sel) {
  return trace();
};

sel7click = function(sel) {
  return trace();
};

sel8click = function(sel) {
  return trace();
};

trace = function() {
  tableClear();
  tableAppend(tabell, 'command', 'stack');
  i = parseInt(sel5.value);
  j = parseInt(sel6.value);
  k = parseInt(sel7.value);
  t = parseInt(sel8.value);
  return calc(true);
};

buildCommands = (function(_this) {
  return function() {
    cmd0 = {};
    cmd1 = {};
    cmd2 = {};
    cmd0['i'] = function() {
      return stack.push(i);
    };
    cmd0['j'] = function() {
      return stack.push(j);
    };
    cmd0['k'] = function() {
      return stack.push(k);
    };
    cmd0['t'] = function() {
      return stack.push(t);
    };
    cmd1['dup'] = function(a) {
      return stack = stack.concat([a, a]);
    };
    cmd1['not'] = function(a) {
      return stack.push(digit(a === 0));
    };
    cmd1['inv'] = function(a) {
      return stack.push(1 / a);
    };
    cmd1['chs'] = function(a) {
      return stack.push(-a);
    };
    cmd1['abs'] = function(a) {
      return stack.push(abs(a));
    };
    cmd1['sqrt'] = function(a) {
      return stack.push(sqrt(a));
    };
    cmd1['rot'] = function(a) {
      return stack.push(a);
    };
    cmd1['~'] = function(a) {
      return stack.push(~a);
    };
    cmd1['biti'] = function(a) {
      return stack.push(a >> i & 1);
    };
    cmd1['bitj'] = function(a) {
      return stack.push(a >> j & 1);
    };
    cmd1['bitk'] = function(a) {
      return stack.push(a >> k & 1);
    };
    cmd1['bitij'] = function(a) {
      return stack = stack.concat([a >> i & 1, a >> j & 1]);
    };
    cmd1['bitik'] = function(a) {
      return stack = stack.concat([a >> i & 1, a >> k & 1]);
    };
    cmd1['bitjk'] = function(a) {
      return stack = stack.concat([a >> j & 1, a >> k & 1]);
    };
    cmd1['bitijk'] = function(a) {
      return stack = stack.concat([a >> i & 1, a >> j & 1, a >> k & 1]);
    };
    cmd2['swap'] = function(a, b) {
      return stack = stack.concat([a, b]);
    };
    cmd2['<'] = function(a, b) {
      return stack.push(digit(b < a));
    };
    cmd2['>'] = function(a, b) {
      return stack.push(digit(b > a));
    };
    cmd2['=='] = function(a, b) {
      return stack.push(digit(b === a));
    };
    cmd2['<='] = function(a, b) {
      return stack.push(digit(b <= a));
    };
    cmd2['>='] = function(a, b) {
      return stack.push(digit(b >= a));
    };
    cmd2['!='] = function(a, b) {
      return stack.push(digit(b !== a));
    };
    cmd2['+'] = function(a, b) {
      return stack.push(b + a);
    };
    cmd2['-'] = function(a, b) {
      return stack.push(b - a);
    };
    cmd2['*'] = function(a, b) {
      return stack.push(b * a);
    };
    cmd2['**'] = function(a, b) {
      return stack.push(Math.pow(b, a));
    };
    cmd2['/'] = function(a, b) {
      return stack.push(b / a);
    };
    cmd2['//'] = function(a, b) {
      return stack.push(Math.floor(b / a));
    };
    cmd2['%'] = function(a, b) {
      return stack.push(b % a);
    };
    cmd2['%%'] = function(a, b) {
      return stack.push(modulo(b, a));
    };
    cmd2['bit'] = function(a, b) {
      return stack.push(b >> a & 1);
    };
    cmd2['&'] = function(a, b) {
      return stack.push(b & a);
    };
    cmd2['|'] = function(a, b) {
      return stack.push(b | a);
    };
    cmd2['^'] = function(a, b) {
      return stack.push(b ^ a);
    };
    cmd2['>>'] = function(a, b) {
      return stack.push(b >> a);
    };
    cmd2['<<'] = function(a, b) {
      return stack.push(b << a);
    };
    cmd2['and'] = function(a, b) {
      return stack.push(digit(b !== 0 && a !== 0));
    };
    cmd2['or'] = function(a, b) {
      return stack.push(digit(b !== 0 || a !== 0));
    };
    return cmd2['xor'] = function(a, b) {
      return stack.push(digit(b + a === 1));
    };
  };
})(this);

setup = function() {
  var c, code, f, index, l, len, p1, p2, p3, ref, results, sel1, sel2, sel3, sel4, sel5, sel6, sel7, sel8, sel9, tabell;
  c = createCanvas(500, 500, WEBGL);
  c.parent('canvas');
  buildCommands();
  code = $('#code');
  sel1 = $('#sel1');
  sel2 = $('#sel2');
  sel3 = $('#sel3');
  sel4 = $('#sel4');
  sel5 = $('#sel5');
  sel6 = $('#sel6');
  sel7 = $('#sel7');
  sel8 = $('#sel8');
  sel9 = $('#sel9');
  tabell = $('#tabell');
  p1 = $('#p1');
  p2 = $('#p2');
  p3 = $('#p3');
  fillSelect(sel1, ['free'].concat(range(0, 360, 15)));
  fillSelect(sel2, ['free'].concat(range(0, 360, 15)));
  fillSelect(sel3, range(1, 26));
  fillSelect(sel4, range(25));
  fillSelect(sel5, range(10));
  fillSelect(sel6, range(10));
  fillSelect(sel7, range(10));
  fillSelect(sel8, range(10));
  fillSelect(sel9, [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]);
  frameRate(10);
  sel1.val("free").change();
  sel2.val("free").change();
  sel3.val("10").change();
  sel4.val("10").change();
  sel5.val("0").change();
  sel6.val("0").change();
  sel7.val("0").change();
  sel8.val("0").change();
  trace();
  f = 255 / (N - 1);
  ref = range(N);
  results = [];
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    results.push((function() {
      var len1, m, ref1, results1;
      ref1 = range(N);
      results1 = [];
      for (m = 0, len1 = ref1.length; m < len1; m++) {
        j = ref1[m];
        results1.push((function() {
          var len2, n, ref2, results2;
          ref2 = range(N);
          results2 = [];
          for (n = 0, len2 = ref2.length; n < len2; n++) {
            k = ref2[n];
            index = N * N * k + N * j + i;
            pg[index] = createGraphics(1, 1);
            results2.push(pg[index].background(f * i, f * j, f * k));
          }
          return results2;
        })());
      }
      return results1;
    })());
  }
  return results;
};

digit = function(bool) {
  if (bool) {
    return 1;
  } else {
    return 0;
  }
};

showStack = function(level, cmd) {
  return tableAppend(tabell, level + cmd, stack.join(' '));
};

showError = function(e) {
  return tableAppend(tabell, e[0], e[1], '#FF0000');
};

evaluate = function(traceFlag, line, level) {
  var arr, cmd, l, len, nr, results;
  if (level == null) {
    level = '';
  }
  arr = line.split(' ');
  results = [];
  for (l = 0, len = arr.length; l < len; l++) {
    cmd = arr[l];
    if (cmd === '') {

    } else if (words[cmd] != null) {
      if (level.indexOf('.' + cmd + '.') !== -1) {
        throw [level + cmd, 'Recursion not allowed'];
      }
      results.push(evaluate(traceFlag, words[cmd], level + cmd + '.'));
    } else if (cmd2[cmd] != null) {
      if (stack.length < 2) {
        throw [level + cmd, 'Stack Underflow'];
      }
      cmd2[cmd](stack.pop(), stack.pop());
      if (traceFlag === true) {
        results.push(showStack(level, cmd));
      } else {
        results.push(void 0);
      }
    } else if (cmd1[cmd] != null) {
      if (stack.length < 1) {
        throw [level + cmd, 'Stack Underflow'];
      }
      cmd1[cmd](cmd === 'rot' ? stack.shift() : stack.pop());
      if (traceFlag === true) {
        results.push(showStack(level, cmd));
      } else {
        results.push(void 0);
      }
    } else if (cmd0[cmd] != null) {
      cmd0[cmd]();
      if (traceFlag === true) {
        results.push(showStack(level, cmd));
      } else {
        results.push(void 0);
      }
    } else {
      nr = parseFloat(cmd);
      if (_.isNumber(nr) && !_.isNaN(nr)) {
        stack.push(nr);
        if (traceFlag === true) {
          results.push(showStack(level, cmd));
        } else {
          results.push(void 0);
        }
      } else {
        throw [level + cmd, 'Unknown symbol'];
      }
    }
  }
  return results;
};

calc = function(traceFlag) {
  var arr, e, l, len, line, lines;
  if (traceFlag == null) {
    traceFlag = false;
  }
  stack = [];
  lines = code.value.split("\n");
  try {
    for (l = 0, len = lines.length; l < len; l++) {
      line = lines[l];
      if (line.indexOf(':') === 0) {
        arr = line.split(' ');
        if (arr.length === 3 && arr[2] === ';') {
          delete words[arr[1]];
        } else {
          words[arr[1]] = arr.slice(2, -1).join(' ');
        }
      } else {
        evaluate(traceFlag, line);
      }
    }
    return 0 !== _.last(stack);
  } catch (error) {
    e = error;
    if (traceFlag === true) {
      return showError(e);
    }
  }
};

mousePressed = function() {
  if ((0 < mouseX && mouseX < width)) {
    lightX = mouseX;
  }
  if ((0 < mouseY && mouseY < height)) {
    return lightY = mouseY;
  }
};

draw = function() {
  var count, index, l, len, len1, len2, locX, locY, m, n, ref, ref1, ref2;
  if (sel4.value === '0') {
    return;
  }
  bg(0.5);
  if ((0 < mouseX && mouseX < width) && (0 < mouseY && mouseY < height)) {
    locY = (0.5 - mouseY / height) * 2;
    locX = (mouseX / width - 0.5) * 2;
  } else {
    locY = (0.5 - lightY / height) * 2;
    locX = (lightX / width - 0.5) * 2;
  }
  pointLight(255, 255, 255, locX, locY, 0);
  if (sel1.value === 'free') {
    yVinkel += sel4.value / 500;
    yVinkel %= TWO_PI;
    rotateY(yVinkel);
  } else {
    rotateY(radians(sel1.value));
  }
  if (sel2.value === 'free') {
    xVinkel += sel4.value / 500;
    xVinkel %= TWO_PI;
    rotateX(xVinkel);
  } else {
    rotateX(radians(sel2.value));
  }
  t = frameCount;
  count = 0;
  ref = range(N);
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    ref1 = range(N);
    for (m = 0, len1 = ref1.length; m < len1; m++) {
      j = ref1[m];
      ref2 = range(N);
      for (n = 0, len2 = ref2.length; n < len2; n++) {
        k = ref2[n];
        push();
        translate(SIZE * (0.5 + i - N / 2), SIZE * (0.5 + j - N / 2), SIZE * (0.5 + k - N / 2));
        if (calc()) {
          index = N * N * k + N * j + i;
          texture(pg[index]);
          box(SIZE, SIZE, SIZE);
          count++;
        } else {
          texture(pg[N * N * N - 1]);
          box(2, 2, 2);
        }
        pop();
      }
    }
  }
  p1.innerHTML = 'Words: ' + code.value.replace(/\n/g, ' ').split(' ').length;
  p2.innerHTML = 'Cubes: ' + count;
  if (millis() > timestamp) {
    p3.innerHTML = 'FPS: ' + int(frameRate());
    return timestamp = millis() + 1000;
  }
};

tableClear = function() {
  return $("#tabell tr").remove();
};

tableAppend = function(t, a, b, col) {
  var cell1, cell2, row;
  if (col == null) {
    col = '#C0C0C0';
  }
  row = t.insertRow(-1);
  cell1 = row.insertCell(-1);
  cell2 = row.insertCell(-1);
  cell1.innerHTML = a;
  cell2.innerHTML = b;
  cell1.style.backgroundColor = '#808080';
  cell2.style.backgroundColor = col;
  return cell2.style.textAlign = 'right';
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHNrZXRjaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsK1RBQUE7RUFBQTs7QUFBQSxDQUFBLEdBQUk7O0FBQ0osSUFBQSxHQUFPLEdBQUEsR0FBSTs7QUFFWCxFQUFBLEdBQUssS0FBQSxDQUFNLENBQUEsR0FBRSxDQUFGLEdBQUksQ0FBVjs7QUFDTCxNQUFBLEdBQVM7O0FBQ1QsTUFBQSxHQUFTOztBQUVULElBQUEsR0FBTzs7QUFDUCxJQUFBLEdBQU87O0FBQ1AsSUFBQSxHQUFPOztBQUVQLEtBQUEsR0FBUTs7QUFDUixDQUFBLEdBQUk7O0FBQ0osQ0FBQSxHQUFJOztBQUNKLENBQUEsR0FBSTs7QUFDSixDQUFBLEdBQUk7O0FBQ0osT0FBQSxHQUFVOztBQUNWLE9BQUEsR0FBVTs7QUFDVixTQUFBLEdBQVk7O0FBRVosS0FBQSxHQUFROztBQUVSLFVBQUEsR0FBYSxTQUFDLEdBQUQsRUFBTSxHQUFOO0FBQ1osTUFBQTtFQUFBLEdBQUcsQ0FBQyxLQUFKLENBQUE7QUFDQTtPQUFBLHFDQUFBOztpQkFDQyxHQUFHLENBQUMsTUFBSixDQUFXLENBQUEsQ0FBRSxVQUFGLENBQWEsQ0FBQyxJQUFkLENBQW1CLE9BQW5CLEVBQTRCLEdBQTVCLENBQWdDLENBQUMsSUFBakMsQ0FBc0MsR0FBdEMsQ0FBWDtBQUREOztBQUZZOztBQUtiLFNBQUEsR0FBWSxTQUFDLEdBQUQsR0FBQTs7QUFDWixTQUFBLEdBQVksU0FBQyxHQUFELEdBQUE7O0FBQ1osU0FBQSxHQUFZLFNBQUMsR0FBRDtFQUNYLEtBQUEsQ0FBTSxHQUFHLENBQUMsS0FBVjtTQUNBLFNBQUEsQ0FBVSxHQUFBLENBQUksR0FBRyxDQUFDLEtBQVIsQ0FBVjtBQUZXOztBQUdaLFNBQUEsR0FBWSxTQUFDLEdBQUQsR0FBQTs7QUFFWixTQUFBLEdBQVksU0FBQyxHQUFEO1NBQVMsS0FBQSxDQUFB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QUFLLENBQUMsS0FBSyxDQUFDLFNBQVosR0FBd0I7QUFSWCIsInNvdXJjZXNDb250ZW50IjpbIk4gPSAxMFxyXG5TSVpFID0gMjUwL05cclxuXHJcbnBnID0gQXJyYXkgTipOKk5cclxubGlnaHRYID0gMFxyXG5saWdodFkgPSAwXHJcblxyXG5jbWQwID0ge31cclxuY21kMSA9IHt9XHJcbmNtZDIgPSB7fVxyXG5cclxuc3RhY2sgPSBbXVxyXG5pID0gMFxyXG5qID0gMFxyXG5rID0gMFxyXG50ID0gMFxyXG54Vmlua2VsID0gMCAjIHJhZGlhbnNcclxueVZpbmtlbCA9IDAgIyByYWRpYW5zXHJcbnRpbWVzdGFtcCA9IDBcclxuXHJcbndvcmRzID0ge31cclxuXHJcbmZpbGxTZWxlY3QgPSAoc2VsLCBhcnIpIC0+XHJcblx0c2VsLmVtcHR5KClcclxuXHRmb3Iga2V5IGluIGFyclxyXG5cdFx0c2VsLmFwcGVuZCgkKFwiPG9wdGlvbj5cIikuYXR0cigndmFsdWUnLCBrZXkpLnRleHQoa2V5KSlcclxuXHJcbnNlbDFjbGljayA9IChzZWwpIC0+XHJcbnNlbDJjbGljayA9IChzZWwpIC0+XHJcbnNlbDNjbGljayA9IChzZWwpIC0+XHJcblx0cHJpbnQgc2VsLnZhbHVlXHJcblx0ZnJhbWVSYXRlIGludCBzZWwudmFsdWVcclxuc2VsNGNsaWNrID0gKHNlbCkgLT5cclxuXHJcbnNlbDVjbGljayA9IChzZWwpIC0+IHRyYWNlKClcclxuc2VsNmNsaWNrID0gKHNlbCkgLT4gdHJhY2UoKVxyXG5zZWw3Y2xpY2sgPSAoc2VsKSAtPiB0cmFjZSgpXHJcbnNlbDhjbGljayA9IChzZWwpIC0+IHRyYWNlKClcclxuXHJcbnRyYWNlID0gLT5cclxuXHR0YWJsZUNsZWFyKClcclxuXHR0YWJsZUFwcGVuZCB0YWJlbGwsICdjb21tYW5kJywgJ3N0YWNrJ1xyXG5cdGkgPSBwYXJzZUludChzZWw1LnZhbHVlKVxyXG5cdGogPSBwYXJzZUludChzZWw2LnZhbHVlKVxyXG5cdGsgPSBwYXJzZUludChzZWw3LnZhbHVlKVxyXG5cdHQgPSBwYXJzZUludChzZWw4LnZhbHVlKVxyXG5cdGNhbGMgdHJ1ZVxyXG5cclxuYnVpbGRDb21tYW5kcyA9ID0+XHJcblx0Y21kMCA9IHt9XHJcblx0Y21kMSA9IHt9XHJcblx0Y21kMiA9IHt9XHJcblxyXG5cdGNtZDBbJ2knXSA9ID0+IHN0YWNrLnB1c2ggaVxyXG5cdGNtZDBbJ2onXSA9ID0+IHN0YWNrLnB1c2ggalxyXG5cdGNtZDBbJ2snXSA9ID0+IHN0YWNrLnB1c2gga1xyXG5cdGNtZDBbJ3QnXSA9ID0+IHN0YWNrLnB1c2ggdFxyXG5cclxuXHRjbWQxWydkdXAnXSA9IChhKSA9PiBzdGFjayA9IHN0YWNrLmNvbmNhdCBbYSxhXVxyXG5cdGNtZDFbJ25vdCddID0gKGEpID0+IHN0YWNrLnB1c2ggZGlnaXQgYSA9PSAwXHJcblx0Y21kMVsnaW52J10gPSAoYSkgPT4gc3RhY2sucHVzaCAxIC8gYVxyXG5cdGNtZDFbJ2NocyddID0gKGEpID0+IHN0YWNrLnB1c2ggLWFcclxuXHRjbWQxWydhYnMnXSA9IChhKSA9PiBzdGFjay5wdXNoIGFicyBhXHJcblx0Y21kMVsnc3FydCddID0gKGEpID0+IHN0YWNrLnB1c2ggc3FydCBhXHJcblx0Y21kMVsncm90J10gPSAoYSkgPT4gc3RhY2sucHVzaCBhXHJcblx0Y21kMVsnfiddID0gKGEpID0+IHN0YWNrLnB1c2ggfmFcclxuXHRjbWQxWydiaXRpJ10gPSAoYSkgPT4gc3RhY2sucHVzaCBhID4+IGkgJiAxXHJcblx0Y21kMVsnYml0aiddID0gKGEpID0+IHN0YWNrLnB1c2ggYSA+PiBqICYgMVxyXG5cdGNtZDFbJ2JpdGsnXSA9IChhKSA9PiBzdGFjay5wdXNoIGEgPj4gayAmIDFcclxuXHRjbWQxWydiaXRpaiddID0gKGEpID0+IHN0YWNrID0gc3RhY2suY29uY2F0IFthID4+IGkgJiAxLCBhID4+IGogJiAxXVxyXG5cdGNtZDFbJ2JpdGlrJ10gPSAoYSkgPT4gc3RhY2sgPSBzdGFjay5jb25jYXQgW2EgPj4gaSAmIDEsIGEgPj4gayAmIDFdXHJcblx0Y21kMVsnYml0amsnXSA9IChhKSA9PiBzdGFjayA9IHN0YWNrLmNvbmNhdCBbYSA+PiBqICYgMSwgYSA+PiBrICYgMV1cclxuXHRjbWQxWydiaXRpamsnXSA9IChhKSA9PiBzdGFjayA9IHN0YWNrLmNvbmNhdCBbYSA+PiBpICYgMSwgYSA+PiBqICYgMSwgYSA+PiBrICYgMV1cclxuXHJcblx0Y21kMlsnc3dhcCddID0gKGEsYikgPT4gc3RhY2sgPSBzdGFjay5jb25jYXQgW2EsYl1cclxuXHRjbWQyWyc8J10gPSAoYSxiKSA9PiBzdGFjay5wdXNoIGRpZ2l0IGIgPCBhXHJcblx0Y21kMlsnPiddID0gKGEsYikgPT4gc3RhY2sucHVzaCBkaWdpdCBiID4gYVxyXG5cdGNtZDJbJz09J10gPSAoYSxiKSA9PiBzdGFjay5wdXNoIGRpZ2l0IGIgPT0gYVxyXG5cdGNtZDJbJzw9J10gPSAoYSxiKSA9PiBzdGFjay5wdXNoIGRpZ2l0IGIgPD0gYVxyXG5cdGNtZDJbJz49J10gPSAoYSxiKSA9PiBzdGFjay5wdXNoIGRpZ2l0IGIgPj0gYVxyXG5cdGNtZDJbJyE9J10gPSAoYSxiKSA9PiBzdGFjay5wdXNoIGRpZ2l0IGIgIT0gYVxyXG5cdGNtZDJbJysnXSA9IChhLGIpID0+IHN0YWNrLnB1c2ggYiArIGFcclxuXHRjbWQyWyctJ10gPSAoYSxiKSA9PiBzdGFjay5wdXNoIGIgLSBhXHJcblx0Y21kMlsnKiddID0gKGEsYikgPT4gc3RhY2sucHVzaCBiICogYVxyXG5cdGNtZDJbJyoqJ10gPSAoYSxiKSA9PiBzdGFjay5wdXNoIGIgKiogYVxyXG5cdGNtZDJbJy8nXSA9IChhLGIpID0+IHN0YWNrLnB1c2ggYiAvIGFcclxuXHRjbWQyWycvLyddID0gKGEsYikgPT4gc3RhY2sucHVzaCBiIC8vIGFcclxuXHRjbWQyWyclJ10gPSAoYSxiKSA9PiBzdGFjay5wdXNoIGIgJSBhXHJcblx0Y21kMlsnJSUnXSA9IChhLGIpID0+IHN0YWNrLnB1c2ggYiAlJSBhXHJcblx0Y21kMlsnYml0J10gPSAoYSxiKSA9PiBzdGFjay5wdXNoIGIgPj4gYSAmIDFcclxuXHRjbWQyWycmJ10gPSAoYSxiKSA9PiBzdGFjay5wdXNoIGIgJiBhXHJcblx0Y21kMlsnfCddID0gKGEsYikgPT4gc3RhY2sucHVzaCBiIHwgYVxyXG5cdGNtZDJbJ14nXSA9IChhLGIpID0+IHN0YWNrLnB1c2ggYiBeIGFcclxuXHRjbWQyWyc+PiddID0gKGEsYikgPT5cdHN0YWNrLnB1c2ggYiA+PiBhXHJcblx0Y21kMlsnPDwnXSA9IChhLGIpID0+IHN0YWNrLnB1c2ggYiA8PCBhXHJcblx0Y21kMlsnYW5kJ10gPSAoYSxiKSA9PiBzdGFjay5wdXNoIGRpZ2l0IGIhPTAgYW5kIGEhPTBcclxuXHRjbWQyWydvciddID0gKGEsYikgPT5cdHN0YWNrLnB1c2ggZGlnaXQgYiE9MCBvciBhIT0wXHJcblx0Y21kMlsneG9yJ10gPSAoYSxiKSA9PiBzdGFjay5wdXNoIGRpZ2l0IGIrYSA9PSAxXHJcblxyXG5zZXR1cCA9IC0+XHJcblx0YyA9IGNyZWF0ZUNhbnZhcyA1MDAsNTAwLFdFQkdMXHJcblx0Yy5wYXJlbnQgJ2NhbnZhcydcclxuXHJcblx0YnVpbGRDb21tYW5kcygpXHJcblxyXG5cdGNvZGUgPSAkKCcjY29kZScpXHJcblxyXG5cdHNlbDEgPSAkKCcjc2VsMScpXHJcblx0c2VsMiA9ICQoJyNzZWwyJylcclxuXHRzZWwzID0gJCgnI3NlbDMnKVxyXG5cdHNlbDQgPSAkKCcjc2VsNCcpXHJcblx0c2VsNSA9ICQoJyNzZWw1JylcclxuXHRzZWw2ID0gJCgnI3NlbDYnKVxyXG5cdHNlbDcgPSAkKCcjc2VsNycpXHJcblx0c2VsOCA9ICQoJyNzZWw4JylcclxuXHRzZWw5ID0gJCgnI3NlbDknKVxyXG5cclxuXHR0YWJlbGwgPSAkKCcjdGFiZWxsJylcclxuXHJcblx0cDEgPSAkKCcjcDEnKVxyXG5cdHAyID0gJCgnI3AyJylcclxuXHRwMyA9ICQoJyNwMycpXHJcblxyXG5cdGZpbGxTZWxlY3Qgc2VsMSwgWydmcmVlJ10uY29uY2F0IHJhbmdlIDAsIDM2MCwgMTUgIyB4XHJcblx0ZmlsbFNlbGVjdCBzZWwyLCBbJ2ZyZWUnXS5jb25jYXQgcmFuZ2UgMCwgMzYwLCAxNSAjIHlcclxuXHRmaWxsU2VsZWN0IHNlbDMsIHJhbmdlIDEsMjYgIyBmcmFtZVJhdGVcclxuXHRmaWxsU2VsZWN0IHNlbDQsIHJhbmdlIDI1ICMgc3BlZWRcclxuXHJcblx0ZmlsbFNlbGVjdCBzZWw1LCByYW5nZSAxMCAjXHJcblx0ZmlsbFNlbGVjdCBzZWw2LCByYW5nZSAxMCAjIGlcclxuXHRmaWxsU2VsZWN0IHNlbDcsIHJhbmdlIDEwICMgalxyXG5cdGZpbGxTZWxlY3Qgc2VsOCwgcmFuZ2UgMTAgIyBrXHJcblx0ZmlsbFNlbGVjdCBzZWw5LCBbMSwyLDQsOCwxNiwzMiw2NCwxMjgsMjU2LDUxMl1cclxuXHJcblx0ZnJhbWVSYXRlIDEwXHJcblxyXG5cdHNlbDEudmFsKFwiZnJlZVwiKS5jaGFuZ2UoKSAjIHhcclxuXHRzZWwyLnZhbChcImZyZWVcIikuY2hhbmdlKCkgIyB5XHJcblx0c2VsMy52YWwoXCIxMFwiKS5jaGFuZ2UoKSAjIGZwc1xyXG5cdHNlbDQudmFsKFwiMTBcIikuY2hhbmdlKCkgIyBzcGVlZFxyXG5cclxuXHRzZWw1LnZhbChcIjBcIikuY2hhbmdlKCkgIyBpXHJcblx0c2VsNi52YWwoXCIwXCIpLmNoYW5nZSgpICMgalxyXG5cdHNlbDcudmFsKFwiMFwiKS5jaGFuZ2UoKSAjIGtcclxuXHRzZWw4LnZhbChcIjBcIikuY2hhbmdlKCkgIyB0XHJcblxyXG5cdHRyYWNlKClcclxuXHJcblx0ZiA9IDI1NS8oTi0xKVxyXG5cdGZvciBpIGluIHJhbmdlIE5cclxuXHRcdGZvciBqIGluIHJhbmdlIE5cclxuXHRcdFx0Zm9yIGsgaW4gcmFuZ2UgTlxyXG5cdFx0XHRcdGluZGV4ID0gTipOKmsrTipqK2lcclxuXHRcdFx0XHRwZ1tpbmRleF0gPSBjcmVhdGVHcmFwaGljcyAxLCAxXHJcblx0XHRcdFx0cGdbaW5kZXhdLmJhY2tncm91bmQgZippLCBmKmosIGYqa1xyXG5cclxuZGlnaXQgPSAoYm9vbCkgLT4gaWYgYm9vbCB0aGVuIDEgZWxzZSAwXHJcbnNob3dTdGFjayA9IChsZXZlbCxjbWQpIC0+IHRhYmxlQXBwZW5kIHRhYmVsbCwgbGV2ZWwgKyBjbWQsIHN0YWNrLmpvaW4gJyAnXHJcbnNob3dFcnJvciA9IChlKSAtPiB0YWJsZUFwcGVuZCB0YWJlbGwsIGVbMF0sIGVbMV0sICcjRkYwMDAwJ1xyXG5cclxuZXZhbHVhdGUgPSAodHJhY2VGbGFnLCBsaW5lLCBsZXZlbD0nJykgLT5cclxuXHRhcnIgPSBsaW5lLnNwbGl0ICcgJ1xyXG5cdGZvciBjbWQgaW4gYXJyXHJcblx0XHRpZiBjbWQ9PScnXHJcblx0XHRcdCMgZG8gbm90aGluZ1xyXG5cdFx0ZWxzZSBpZiB3b3Jkc1tjbWRdP1xyXG5cdFx0XHRpZiBsZXZlbC5pbmRleE9mKCcuJytjbWQrJy4nKSAhPSAtMSB0aGVuIHRocm93IFtsZXZlbCtjbWQsJ1JlY3Vyc2lvbiBub3QgYWxsb3dlZCddXHJcblx0XHRcdGV2YWx1YXRlIHRyYWNlRmxhZywgd29yZHNbY21kXSwgbGV2ZWwgKyBjbWQgKyAnLidcclxuXHRcdGVsc2UgaWYgY21kMltjbWRdP1xyXG5cdFx0XHRpZiBzdGFjay5sZW5ndGggPCAyIHRoZW4gdGhyb3cgW2xldmVsK2NtZCwnU3RhY2sgVW5kZXJmbG93J11cclxuXHRcdFx0Y21kMltjbWRdIHN0YWNrLnBvcCgpLCBzdGFjay5wb3AoKVxyXG5cdFx0XHRpZiB0cmFjZUZsYWc9PXRydWUgdGhlbiBzaG93U3RhY2sgbGV2ZWwsY21kXHJcblx0XHRlbHNlIGlmIGNtZDFbY21kXT9cclxuXHRcdFx0aWYgc3RhY2subGVuZ3RoIDwgMSB0aGVuIHRocm93IFtsZXZlbCtjbWQsJ1N0YWNrIFVuZGVyZmxvdyddXHJcblx0XHRcdGNtZDFbY21kXSBpZiBjbWQ9PSdyb3QnIHRoZW4gc3RhY2suc2hpZnQoKSBlbHNlIHN0YWNrLnBvcCgpXHJcblx0XHRcdGlmIHRyYWNlRmxhZz09dHJ1ZSB0aGVuIHNob3dTdGFjayBsZXZlbCxjbWRcclxuXHRcdGVsc2UgaWYgY21kMFtjbWRdP1xyXG5cdFx0XHRjbWQwW2NtZF0oKVxyXG5cdFx0XHRpZiB0cmFjZUZsYWc9PXRydWUgdGhlbiBzaG93U3RhY2sgbGV2ZWwsY21kXHJcblx0XHRlbHNlXHJcblx0XHRcdG5yID0gcGFyc2VGbG9hdCBjbWRcclxuXHRcdFx0aWYgXy5pc051bWJlcihucikgYW5kIG5vdCBfLmlzTmFOIG5yXHJcblx0XHRcdFx0c3RhY2sucHVzaCBuclxyXG5cdFx0XHRcdGlmIHRyYWNlRmxhZz09dHJ1ZSB0aGVuIHNob3dTdGFjayBsZXZlbCxjbWRcclxuXHRcdFx0ZWxzZVxyXG5cdFx0XHRcdHRocm93IFtsZXZlbCtjbWQsJ1Vua25vd24gc3ltYm9sJ11cclxuXHJcbmNhbGMgPSAodHJhY2VGbGFnID0gZmFsc2UpIC0+XHJcblx0c3RhY2sgPSBbXVxyXG5cdGxpbmVzID0gY29kZS52YWx1ZS5zcGxpdCBcIlxcblwiXHJcblx0dHJ5XHJcblx0XHRmb3IgbGluZSBpbiBsaW5lc1xyXG5cdFx0XHRpZiBsaW5lLmluZGV4T2YoJzonKT09MFxyXG5cdFx0XHRcdGFyciA9IGxpbmUuc3BsaXQgJyAnXHJcblx0XHRcdFx0aWYgYXJyLmxlbmd0aCA9PSAzIGFuZCBhcnJbMl0gPT0gJzsnXHJcblx0XHRcdFx0XHRkZWxldGUgd29yZHNbYXJyWzFdXVxyXG5cdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdHdvcmRzW2FyclsxXV0gPSBhcnJbMi4uLTJdLmpvaW4oJyAnKVxyXG5cdFx0XHRlbHNlXHJcblx0XHRcdFx0ZXZhbHVhdGUgdHJhY2VGbGFnLCBsaW5lXHJcblx0XHQwICE9IF8ubGFzdCBzdGFja1xyXG5cdGNhdGNoIGVcclxuXHRcdGlmIHRyYWNlRmxhZz09dHJ1ZSB0aGVuIHNob3dFcnJvciBlXHJcblxyXG5tb3VzZVByZXNzZWQgPSAtPlxyXG5cdGlmIDAgPCBtb3VzZVggPCB3aWR0aCB0aGVuIGxpZ2h0WCA9IG1vdXNlWFxyXG5cdGlmIDAgPCBtb3VzZVkgPCBoZWlnaHQgdGhlbiBsaWdodFkgPSBtb3VzZVlcclxuXHJcbmRyYXcgPSAtPlxyXG5cdGlmIHNlbDQudmFsdWUgPT0gJzAnIHRoZW4gcmV0dXJuXHJcblx0YmcgMC41XHJcblxyXG5cdGlmIDAgPCBtb3VzZVggPCB3aWR0aCBhbmQgMCA8IG1vdXNlWSA8IGhlaWdodFxyXG5cdFx0bG9jWSA9ICgwLjUgLSBtb3VzZVkgLyBoZWlnaHQpICogMlxyXG5cdFx0bG9jWCA9IChtb3VzZVggLyB3aWR0aCAgLSAwLjUpICogMlxyXG5cdGVsc2VcclxuXHRcdGxvY1kgPSAoMC41IC0gbGlnaHRZIC8gaGVpZ2h0KSAqIDJcclxuXHRcdGxvY1ggPSAobGlnaHRYIC8gd2lkdGggIC0gMC41KSAqIDJcclxuXHRwb2ludExpZ2h0IDI1NSwgMjU1LCAyNTUsIGxvY1gsbG9jWSwwXHJcblxyXG5cdGlmIHNlbDEudmFsdWUgPT0gJ2ZyZWUnXHJcblx0XHR5Vmlua2VsICs9IHNlbDQudmFsdWUvNTAwXHJcblx0XHR5Vmlua2VsICU9IFRXT19QSVxyXG5cdFx0cm90YXRlWSB5Vmlua2VsXHJcblx0ZWxzZVxyXG5cdFx0cm90YXRlWSByYWRpYW5zIHNlbDEudmFsdWVcclxuXHJcblx0aWYgc2VsMi52YWx1ZSA9PSAnZnJlZSdcclxuXHRcdHhWaW5rZWwgKz0gc2VsNC52YWx1ZS81MDBcclxuXHRcdHhWaW5rZWwgJT0gVFdPX1BJXHJcblx0XHRyb3RhdGVYIHhWaW5rZWxcclxuXHRlbHNlXHJcblx0XHRyb3RhdGVYIHJhZGlhbnMgc2VsMi52YWx1ZVxyXG5cclxuXHR0ID0gZnJhbWVDb3VudFxyXG5cdGNvdW50ID0gMFxyXG5cdGZvciBpIGluIHJhbmdlIE5cclxuXHRcdGZvciBqIGluIHJhbmdlIE5cclxuXHRcdFx0Zm9yIGsgaW4gcmFuZ2UgTlxyXG5cdFx0XHRcdHB1c2goKVxyXG5cdFx0XHRcdHRyYW5zbGF0ZSBTSVpFKigwLjUraS1OLzIpLFNJWkUqKDAuNStqLU4vMiksU0laRSooMC41K2stTi8yKVxyXG5cdFx0XHRcdGlmIGNhbGMoKVxyXG5cdFx0XHRcdFx0aW5kZXggPSBOKk4qaytOKmoraVxyXG5cdFx0XHRcdFx0dGV4dHVyZSBwZ1tpbmRleF1cclxuXHRcdFx0XHRcdGJveCBTSVpFLFNJWkUsU0laRVxyXG5cdFx0XHRcdFx0Y291bnQrK1xyXG5cdFx0XHRcdGVsc2VcclxuXHRcdFx0XHRcdHRleHR1cmUgcGdbTipOKk4tMV1cclxuXHRcdFx0XHRcdGJveCAyLDIsMlxyXG5cdFx0XHRcdHBvcCgpXHJcblxyXG5cdHAxLmlubmVySFRNTCA9ICdXb3JkczogJyArIGNvZGUudmFsdWUucmVwbGFjZSgvXFxuL2csJyAnKS5zcGxpdCgnICcpLmxlbmd0aFxyXG5cdHAyLmlubmVySFRNTCA9ICdDdWJlczogJyArIGNvdW50XHJcblx0aWYgbWlsbGlzKCkgPiB0aW1lc3RhbXBcclxuXHRcdHAzLmlubmVySFRNTCA9ICdGUFM6ICcgKyBpbnQgZnJhbWVSYXRlKClcclxuXHRcdHRpbWVzdGFtcCA9IG1pbGxpcygpICsgMTAwMFxyXG5cclxudGFibGVDbGVhciA9IC0+ICQoXCIjdGFiZWxsIHRyXCIpLnJlbW92ZSgpXHJcblxyXG50YWJsZUFwcGVuZCA9ICh0LCBhLCBiLCBjb2w9JyNDMEMwQzAnKSAtPlxyXG5cdHJvdyA9IHQuaW5zZXJ0Um93IC0xXHJcblx0Y2VsbDEgPSByb3cuaW5zZXJ0Q2VsbCAtMVxyXG5cdGNlbGwyID0gcm93Lmluc2VydENlbGwgLTFcclxuXHRjZWxsMS5pbm5lckhUTUwgPSBhXHJcblx0Y2VsbDIuaW5uZXJIVE1MID0gYlxyXG5cdGNlbGwxLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcjODA4MDgwJ1xyXG5cdGNlbGwyLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGNvbFxyXG5cdGNlbGwyLnN0eWxlLnRleHRBbGlnbiA9ICdyaWdodCciXX0=
//# sourceURL=C:\github\p5Forth3D\coffee\sketch.coffee