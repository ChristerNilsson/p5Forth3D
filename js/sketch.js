// Generated by CoffeeScript 1.11.1
var Settings, btn19click, btn6click, btn7click, btn8click, btn9click, buildCommands, calc, cmd0, cmd1, cmd2, cmd3, codechange, digit, displayDebug, draw, evaluate, fillSelect, gcd, i, j, k, lastX, lastY, linkAppend, loadSettings, mouseDragged, mousePressed, rstack, saveCanvasCount, sel0click, sel14click, sel15click, sel16click, sel17click, sel18click, sel1click, sel3click, settings, setup, showError, showStack, stack, standard, t, tableAppend, tableClear, timestamp, trace, vinkelX, vinkelY, words,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

Settings = (function() {
  function Settings() {
    this.get = {};
  }

  Settings.prototype.load = function(name, value) {
    var v;
    v = localStorage["Forth3D/" + name];
    return this.get[name] = v != null ? v : value;
  };

  Settings.prototype.loadInt = function(name, value) {
    var v;
    v = int(localStorage["Forth3D/" + name]);
    return this.get[name] = v != null ? v : value;
  };

  Settings.prototype.set = function(name, value) {
    localStorage["Forth3D/" + name] = value;
    return this.get[name] = value;
  };

  return Settings;

})();

vinkelX = 90;

vinkelY = 0;

lastX = 0;

lastY = 0;

cmd0 = {};

cmd1 = {};

cmd2 = {};

cmd3 = {};

stack = [];

rstack = [];

timestamp = 0;

words = {};

saveCanvasCount = 0;

settings = new Settings;

i = 0;

j = 0;

k = 0;

t = 0;

fillSelect = function(sel, arr) {
  var key, l, len1, results;
  sel.empty();
  results = [];
  for (l = 0, len1 = arr.length; l < len1; l++) {
    key = arr[l];
    results.push(sel.append($("<option>").attr('value', key).text(key)));
  }
  return results;
};

codechange = function(textarea) {
  settings.set('code', textarea.value);
  return trace();
};

loadSettings = function() {
  settings.load('code', '5 bitijk + + 3 =');
  settings.loadInt('font', 32);
  settings.loadInt('n', 3);
  settings.loadInt('fps', 10);
  settings.loadInt('fig', 0);
  settings.loadInt('grid', 1);
  settings.loadInt('rotate', 0);
  settings.loadInt('debug', 0);
  settings.loadInt('i', 0);
  settings.loadInt('j', 0);
  settings.loadInt('k', 0);
  settings.loadInt('t', 0);
  settings.loadInt('SIZE', 400 / settings.get.n);
  return settings.load('scaling', '1.0');
};

sel0click = function(sel) {
  return settings.set('scaling', sel.value);
};

sel1click = function(sel) {
  print('sel1click');
  settings.set('n', int(sel.value));
  settings.set('SIZE', int(400 / settings.get.n));
  fillSelect($('#sel19'), (function() {
    var l, len1, ref, results;
    ref = range(settings.get.n);
    results = [];
    for (l = 0, len1 = ref.length; l < len1; l++) {
      i = ref[l];
      results.push(Math.pow(2, i));
    }
    return results;
  })());
  fillSelect($('#sel15'), range(settings.get.n));
  fillSelect($('#sel16'), range(settings.get.n));
  fillSelect($('#sel17'), range(settings.get.n));
  $('#sel15').val('0');
  $('#sel16').val('0');
  $('#sel17').val('0');
  sel15click(sel15);
  sel16click(sel16);
  return sel17click(sel17);
};

sel3click = function(sel) {
  settings.set('fps', int(sel.value));
  return frameRate(settings.get.fps);
};

sel14click = function(sel) {
  settings.set('font', sel.value);
  return document.getElementById("code").style.fontSize = settings.get.font + 'px';
};

sel15click = function(sel) {
  print('sel15click', sel.value);
  settings.set('i', int(sel.value));
  return trace();
};

sel16click = function(sel) {
  settings.set('j', int(sel.value));
  return trace();
};

sel17click = function(sel) {
  settings.set('k', int(sel.value));
  return trace();
};

sel18click = function(sel) {
  settings.set('t', int(sel.value));
  return trace();
};

btn6click = function() {
  return settings.set('fig', 1 - settings.get.fig);
};

btn7click = function() {
  return settings.set('grid', 1 - settings.get.grid);
};

btn9click = function() {
  return settings.set('rotate', 1 - settings.get.rotate);
};

btn8click = function() {
  settings.set('debug', 1 - settings.get.debug);
  return displayDebug();
};

displayDebug = function() {
  var control, id, l, len1, ref, results;
  ref = '#btn15 #btn16 #btn17 #btn18 #sel15 #sel16 #sel17 #sel18 #sel19 #tabell'.split(' ');
  results = [];
  for (l = 0, len1 = ref.length; l < len1; l++) {
    id = ref[l];
    control = $(id);
    if (settings.get.debug === 1) {
      results.push(control.show());
    } else {
      results.push(control.hide());
    }
  }
  return results;
};

btn19click = function() {
  return saveCanvasCount++;
};

trace = function() {
  tableClear();
  tableAppend(tabell, 'command', 'stack');
  i = parseInt(sel15.value);
  j = parseInt(sel16.value);
  k = parseInt(sel17.value);
  t = parseInt(sel18.value);
  return calc(true);
};

linkAppend = function(t, link, text) {
  var cell1, d, dd, row, s;
  d = function(s) {
    return "'" + s + "'";
  };
  dd = function(s) {
    return '"' + s + '"';
  };
  row = t.insertRow(-1);
  cell1 = row.insertCell(-1);
  s = '<a href=' + d(link);
  s += ' target=' + d('_blank');
  s += ' onmouseover=' + d('this.style.color=' + dd('yellow') + ';');
  s += ' onmouseout=' + d('this.style.color=' + dd('black') + ';');
  s += '>';
  s += text;
  s += '</a>';
  return cell1.innerHTML = s;
};

buildCommands = function() {
  cmd0['i'] = (function(_this) {
    return function() {
      return [i];
    };
  })(this);
  cmd0['j'] = (function(_this) {
    return function() {
      return [j];
    };
  })(this);
  cmd0['k'] = (function(_this) {
    return function() {
      return [k];
    };
  })(this);
  cmd0['t'] = (function(_this) {
    return function() {
      return [t];
    };
  })(this);
  cmd0['pop'] = (function(_this) {
    return function() {
      return [rstack.pop()];
    };
  })(this);
  cmd1['push'] = (function(_this) {
    return function(a) {
      rstack.push(a);
      return [];
    };
  })(this);
  cmd1['drop'] = (function(_this) {
    return function(a) {
      return [];
    };
  })(this);
  cmd1['dup'] = (function(_this) {
    return function(a) {
      return [a, a];
    };
  })(this);
  cmd1['not'] = (function(_this) {
    return function(a) {
      return [digit(a === 0)];
    };
  })(this);
  cmd1['inv'] = (function(_this) {
    return function(a) {
      return [1 / a];
    };
  })(this);
  cmd1['chs'] = (function(_this) {
    return function(a) {
      return [-a];
    };
  })(this);
  cmd1['sign'] = (function(_this) {
    return function(a) {
      return [Math.sign(a)];
    };
  })(this);
  cmd1['abs'] = (function(_this) {
    return function(a) {
      return [abs(a)];
    };
  })(this);
  cmd1['sqrt'] = (function(_this) {
    return function(a) {
      return [sqrt(a)];
    };
  })(this);
  cmd1['rot'] = (function(_this) {
    return function(a) {
      return [a];
    };
  })(this);
  cmd1['~'] = (function(_this) {
    return function(a) {
      return [~a];
    };
  })(this);
  cmd1['biti'] = (function(_this) {
    return function(a) {
      return [a >> i & 1];
    };
  })(this);
  cmd1['bitj'] = (function(_this) {
    return function(a) {
      return [a >> j & 1];
    };
  })(this);
  cmd1['bitk'] = (function(_this) {
    return function(a) {
      return [a >> k & 1];
    };
  })(this);
  cmd1['bitij'] = (function(_this) {
    return function(a) {
      return [a >> i & 1, a >> j & 1];
    };
  })(this);
  cmd1['bitik'] = (function(_this) {
    return function(a) {
      return [a >> i & 1, a >> k & 1];
    };
  })(this);
  cmd1['bitjk'] = (function(_this) {
    return function(a) {
      return [a >> j & 1, a >> k & 1];
    };
  })(this);
  cmd1['bitijk'] = (function(_this) {
    return function(a) {
      return [a >> i & 1, a >> j & 1, a >> k & 1];
    };
  })(this);
  cmd2['swap'] = (function(_this) {
    return function(a, b) {
      return [a, b];
    };
  })(this);
  cmd2['<'] = (function(_this) {
    return function(a, b) {
      return [digit(b < a)];
    };
  })(this);
  cmd2['>'] = (function(_this) {
    return function(a, b) {
      return [digit(b > a)];
    };
  })(this);
  cmd2['='] = (function(_this) {
    return function(a, b) {
      return [digit(b === a)];
    };
  })(this);
  cmd2['<='] = (function(_this) {
    return function(a, b) {
      return [digit(b <= a)];
    };
  })(this);
  cmd2['>='] = (function(_this) {
    return function(a, b) {
      return [digit(b >= a)];
    };
  })(this);
  cmd2['<>'] = (function(_this) {
    return function(a, b) {
      return [digit(b !== a)];
    };
  })(this);
  cmd2['+'] = (function(_this) {
    return function(a, b) {
      return [b + a];
    };
  })(this);
  cmd2['-'] = (function(_this) {
    return function(a, b) {
      return [b - a];
    };
  })(this);
  cmd2['*'] = (function(_this) {
    return function(a, b) {
      return [b * a];
    };
  })(this);
  cmd2['**'] = (function(_this) {
    return function(a, b) {
      return [Math.pow(b, a)];
    };
  })(this);
  cmd2['/'] = (function(_this) {
    return function(a, b) {
      return [b / a];
    };
  })(this);
  cmd2['//'] = (function(_this) {
    return function(a, b) {
      return [Math.floor(b / a)];
    };
  })(this);
  cmd2['%'] = (function(_this) {
    return function(a, b) {
      return [b % a];
    };
  })(this);
  cmd2['%%'] = (function(_this) {
    return function(a, b) {
      return [modulo(b, a)];
    };
  })(this);
  cmd2['gcd'] = (function(_this) {
    return function(a, b) {
      return [gcd(a, b)];
    };
  })(this);
  cmd2['bit'] = (function(_this) {
    return function(a, b) {
      return [a >> b & 1];
    };
  })(this);
  cmd2['&'] = (function(_this) {
    return function(a, b) {
      return [b & a];
    };
  })(this);
  cmd2['|'] = (function(_this) {
    return function(a, b) {
      return [b | a];
    };
  })(this);
  cmd2['^'] = (function(_this) {
    return function(a, b) {
      return [b ^ a];
    };
  })(this);
  cmd2['>>'] = (function(_this) {
    return function(a, b) {
      return [b >> a];
    };
  })(this);
  cmd2['<<'] = (function(_this) {
    return function(a, b) {
      return [b << a];
    };
  })(this);
  cmd2['and'] = (function(_this) {
    return function(a, b) {
      return [digit(b !== 0 && a !== 0)];
    };
  })(this);
  cmd2['or'] = (function(_this) {
    return function(a, b) {
      return [digit(b !== 0 || a !== 0)];
    };
  })(this);
  cmd2['xor'] = (function(_this) {
    return function(a, b) {
      return [digit(b + a === 1)];
    };
  })(this);
  cmd3['rot'] = (function(_this) {
    return function(c, b, a) {
      return [b, c, a];
    };
  })(this);
  return cmd3['-rot'] = (function(_this) {
    return function(c, b, a) {
      return [c, a, b];
    };
  })(this);
};

standard = function(name, value) {
  if (localStorage[name] != null) {
    return localStorage[name];
  } else {
    return value;
  }
};

setup = function() {
  var c, code, p1, p2, p3, sel0, sel1, sel14, sel15, sel16, sel17, sel18, sel19, sel3, tabell;
  c = createCanvas(800, 800, WEBGL);
  c.parent('canvas');
  buildCommands();
  code = $('#code');
  sel0 = $('#sel0');
  sel1 = $('#sel1');
  sel3 = $('#sel3');
  sel14 = $('#sel14');
  sel15 = $('#sel15');
  sel16 = $('#sel16');
  sel17 = $('#sel17');
  sel18 = $('#sel18');
  sel19 = $('#sel19');
  tabell = $('#tabell');
  p1 = $('#p1');
  p2 = $('#p2');
  p3 = $('#p3');
  loadSettings();
  fillSelect(sel0, '0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0'.split(' '));
  fillSelect(sel1, range(2, 28));
  fillSelect(sel3, range(26));
  fillSelect(sel14, range(16, 36, 2));
  fillSelect(sel15, range(settings.get.n));
  fillSelect(sel16, range(settings.get.n));
  fillSelect(sel17, range(settings.get.n));
  fillSelect(sel18, range(10));
  fillSelect(sel19, (function() {
    var l, len1, ref, results;
    ref = range(settings.get.n);
    results = [];
    for (l = 0, len1 = ref.length; l < len1; l++) {
      i = ref[l];
      results.push(Math.pow(2, i));
    }
    return results;
  })());
  sel0.val(settings.get.scaling);
  sel1.val(settings.get.n);
  sel3.val(settings.get.fps);
  sel14.val(settings.get.font);
  sel15.val(settings.get.i);
  sel16.val(settings.get.j);
  sel17.val(settings.get.k);
  sel18.val(settings.get.t);
  code.val(settings.get.code);
  document.getElementById("code").style.fontSize = settings.get.font + 'px';
  linkAppend(links, "https://github.com/ChristerNilsson/p5Forth3D#p5forth3d", "Help");
  linkAppend(links, "examples2x2x2.html", "Examples 2x2x2");
  linkAppend(links, "examples3x3x3.html", "Examples 3x3x3");
  linkAppend(links, "examples.html", "Examples");
  frameRate(settings.get.fps);
  texture(createGraphics(1, 1));
  return displayDebug();
};

digit = function(bool) {
  if (bool) {
    return 1;
  } else {
    return 0;
  }
};

showStack = function(level, cmd) {
  return tableAppend(tabell, level + cmd, stack.join(' '));
};

showError = function(e) {
  return tableAppend(tabell, e[0], e[1], '#FF0000');
};

gcd = function(x, y) {
  if (y === 0) {
    return x;
  } else {
    return gcd(y, x % y);
  }
};

mousePressed = function() {
  if ((0 < mouseX && mouseX < width) && (0 < mouseY && mouseY < height)) {
    lastX = mouseX;
    return lastY = mouseY;
  }
};

mouseDragged = function() {
  var dx, dy;
  if ((0 < mouseX && mouseX < width) && (0 < mouseY && mouseY < height)) {
    dx = mouseX - lastX;
    dy = mouseY - lastY;
    vinkelX += dx / 4;
    vinkelY += dy / 4;
    lastX = mouseX;
    return lastY = mouseY;
  }
};

evaluate = function(traceFlag, line, level) {
  var arr, cmd, l, len1, nr, results;
  if (level == null) {
    level = '';
  }
  arr = line.split(' ');
  results = [];
  for (l = 0, len1 = arr.length; l < len1; l++) {
    cmd = arr[l];
    if (cmd === '') {

    } else if (words[cmd] != null) {
      if (level.indexOf('.' + cmd + '.') !== -1) {
        throw [level + cmd, 'Recursion not allowed'];
      }
      results.push(evaluate(traceFlag, words[cmd], level + cmd + '.'));
    } else if (cmd3[cmd] != null) {
      if (stack.length < 3) {
        throw [level + cmd, 'Stack Underflow'];
      }
      stack = stack.concat(cmd3[cmd](stack.pop(), stack.pop(), stack.pop()));
      if (traceFlag) {
        results.push(showStack(level, cmd));
      } else {
        results.push(void 0);
      }
    } else if (cmd2[cmd] != null) {
      if (stack.length < 2) {
        throw [level + cmd, 'Stack Underflow'];
      }
      stack = stack.concat(cmd2[cmd](stack.pop(), stack.pop()));
      if (traceFlag) {
        results.push(showStack(level, cmd));
      } else {
        results.push(void 0);
      }
    } else if (cmd1[cmd] != null) {
      if (stack.length < 1) {
        throw [level + cmd, 'Stack Underflow'];
      }
      stack = stack.concat(cmd1[cmd](cmd === 'rot' ? stack.shift() : stack.pop()));
      if (traceFlag) {
        results.push(showStack(level, cmd));
      } else {
        results.push(void 0);
      }
    } else if (cmd0[cmd] != null) {
      stack = stack.concat(cmd0[cmd]());
      if (traceFlag) {
        results.push(showStack(level, cmd));
      } else {
        results.push(void 0);
      }
    } else {
      nr = parseFloat(cmd);
      if (_.isNumber(nr) && !_.isNaN(nr)) {
        stack.push(nr);
        if (traceFlag) {
          results.push(showStack(level, cmd));
        } else {
          results.push(void 0);
        }
      } else {
        throw [level + cmd, 'Unknown Word'];
      }
    }
  }
  return results;
};

calc = function(traceFlag) {
  var arr, cmd, defWords, e, l, len1, state, stateStack;
  if (traceFlag == null) {
    traceFlag = false;
  }
  words = {};
  stack = [];
  rstack = [];
  arr = code.value.replace(/\n/g, ' ').split(' ');
  state = 'normal';
  defWords = [];
  stateStack = [];
  try {
    for (l = 0, len1 = arr.length; l < len1; l++) {
      cmd = arr[l];
      if (cmd === '(') {
        stateStack.push('(');
      }
      if (cmd === '') {
        continue;
      }
      if (cmd === ':') {
        stateStack.push(':');
      }
      if (_.last(stateStack) === '(') {
        if (cmd === ')') {
          stateStack.pop();
        }
      } else if (_.last(stateStack) === ':') {
        defWords.push(cmd);
        if (cmd === ';') {
          if (defWords.length === 3) {
            delete words[defWords[0]];
          } else {
            words[defWords[1]] = defWords.slice(2, -1).join(' ');
          }
          defWords = [];
          stateStack.pop();
        }
      } else {
        evaluate(traceFlag, cmd);
      }
    }
    return stack.length === 1 && 0 !== _.last(stack);
  } catch (error) {
    e = error;
    if (traceFlag) {
      return showError(e);
    }
  }
};

draw = function() {
  var arr, count, drawFigure, f, i0, item, j0, k0, l, len1, len2, len3, locX, locY, m, n, ref, ref1, ref2, scaling, showAxes, x, y, z;
  drawFigure = (function(_this) {
    return function(s) {
      var u;
      s = _.max([int(s), 5]);
      u = int(s / 2);
      if (settings.get.fig === 0) {
        return sphere(u, u, u);
      } else {
        return box(s, s, s);
      }
    };
  })(this);
  showAxes = (function(_this) {
    return function() {
      var len, size;
      if (settings.get.debug === 0) {
        return;
      }
      if (i0 !== i) {
        return;
      }
      if (j0 !== j) {
        return;
      }
      if (k0 !== k) {
        return;
      }
      size = settings.get.SIZE;
      len = (settings.get.n - 1) * size;
      push();
      translate(0, size * (settings.get.n / 2 - 1 / 2 - j), 0);
      specularMaterial(0, 255, 0);
      cylinder(size / 50, len);
      pop();
      push();
      translate(0, 0, size * (settings.get.n / 2 - 1 / 2 - k));
      rotateX(radians(90));
      specularMaterial(0, 0, 255);
      cylinder(size / 50, len);
      pop();
      push();
      translate(size * (settings.get.n / 2 - 1 / 2 - i), 0, 0);
      rotateZ(radians(90));
      specularMaterial(255, 0, 0);
      cylinder(size / 50, len);
      return pop();
    };
  })(this);
  if (settings.get.fps === 0) {
    return;
  }
  trace();
  bg(0.5);
  if ((0 < mouseX && mouseX < width) && (0 < mouseY && mouseY < height)) {
    locX = 2 * mouseX / width - 1;
    locY = 1 - 2 * mouseY / height;
  } else {
    locX = -(1 - 2 * lastX / height);
    locY = -(2 * lastY / width - 1);
  }
  if (settings.get.rotate === 1) {
    vinkelY += 1;
    vinkelX += 0.5;
  }
  rotateX(radians(vinkelY));
  rotateY(radians(vinkelX));
  ambientLight(128, 128, 128);
  pointLight(255, 255, 255, locX, locY, 0.25);
  i0 = settings.get.i;
  j0 = settings.get.j;
  k0 = settings.get.k;
  t = frameCount;
  count = 0;
  scaling = parseFloat(settings.get.scaling);
  ref = range(settings.get.n);
  for (l = 0, len1 = ref.length; l < len1; l++) {
    i = ref[l];
    ref1 = range(settings.get.n);
    for (m = 0, len2 = ref1.length; m < len2; m++) {
      j = ref1[m];
      ref2 = range(settings.get.n);
      for (n = 0, len3 = ref2.length; n < len3; n++) {
        k = ref2[n];
        push();
        x = settings.get.SIZE * (0.5 + i - settings.get.n / 2);
        y = settings.get.SIZE * (0.5 + j - settings.get.n / 2);
        z = settings.get.SIZE * (0.5 + k - settings.get.n / 2);
        translate(x, y, z);
        f = 255 / (settings.get.n - 1);
        specularMaterial(f * i, f * j, f * k);
        if (calc()) {
          drawFigure(scaling * settings.get.SIZE);
          count++;
        } else {
          if (settings.get.grid === 1) {
            drawFigure(scaling * 2 * settings.get.SIZE / 10);
          }
        }
        showAxes();
        pop();
      }
    }
  }
  arr = code.value.replace(/\n/g, ' ').split(' ');
  arr = (function() {
    var len4, o, results;
    results = [];
    for (o = 0, len4 = arr.length; o < len4; o++) {
      item = arr[o];
      if (item.length > 0) {
        results.push(item);
      }
    }
    return results;
  })();
  p1.innerHTML = 'Words: ' + arr.length;
  p2.innerHTML = 'Figures: ' + count;
  if (millis() > timestamp) {
    p3.innerHTML = "FPS: " + (nf(frameRate(), 0, 1));
    timestamp = millis() + 1000;
  }
  if (saveCanvasCount > 0) {
    saveCanvas('p5Forth3D', 'png');
    return saveCanvasCount--;
  }
};

tableClear = function() {
  return $("#tabell tr").remove();
};

tableAppend = function(t, a, b, col) {
  var cell1, cell2, row;
  if (col == null) {
    col = '#80808000';
  }
  row = t.insertRow(-1);
  cell1 = row.insertCell(-1);
  cell2 = row.insertCell(-1);
  cell1.innerHTML = a;
  cell2.innerHTML = b;
  cell1.style.backgroundColor = '#C0C0C000';
  cell1.style.color = '#FFFFFF';
  cell2.style.backgroundColor = col;
  return cell2.style.textAlign = 'right';
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\github\p5Forth3D\coffee\sketch.coffee