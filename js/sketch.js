// Generated by CoffeeScript 1.11.1
var N, SIZE, buildCommands, calc, cmd0, cmd1, cmd2, digit, draw, evaluate, fillSelect, i, j, k, lightX, lightY, mousePressed, pg, sel1click, sel2click, sel3click, sel4click, sel5click, sel6click, sel7click, sel8click, setup, stack, t, tableAppend, tableClear, timestamp, trace, words, xVinkel, yVinkel,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

N = 10;

SIZE = 250 / N;

pg = Array(N * N * N);

lightX = 0;

lightY = 0;

cmd0 = {};

cmd1 = {};

cmd2 = {};

stack = [];

i = 0;

j = 0;

k = 0;

t = 0;

xVinkel = 0;

yVinkel = 0;

timestamp = 0;

words = {};

fillSelect = function(sel, arr) {
  var key, l, len, results;
  sel.empty();
  results = [];
  for (l = 0, len = arr.length; l < len; l++) {
    key = arr[l];
    results.push(sel.append($("<option>").attr('value', key).text(key)));
  }
  return results;
};

sel1click = function(sel) {};

sel2click = function(sel) {};

sel3click = function(sel) {
  print(sel.value);
  return frameRate(int(sel.value));
};

sel4click = function(sel) {};

sel5click = function(sel) {
  return trace();
};

sel6click = function(sel) {
  return trace();
};

sel7click = function(sel) {
  return trace();
};

sel8click = function(sel) {
  return trace();
};

trace = function() {
  tableClear();
  tableAppend(tabell, 'command', 'stack');
  i = parseInt(sel5.value);
  j = parseInt(sel6.value);
  k = parseInt(sel7.value);
  t = parseInt(sel8.value);
  return calc(true);
};

buildCommands = (function(_this) {
  return function() {
    cmd0 = {};
    cmd1 = {};
    cmd2 = {};
    cmd0['i'] = function() {
      return stack.push(i);
    };
    cmd0['j'] = function() {
      return stack.push(j);
    };
    cmd0['k'] = function() {
      return stack.push(k);
    };
    cmd0['t'] = function() {
      return stack.push(t);
    };
    cmd1['dup'] = function() {
      return stack.push(_.last(stack));
    };
    cmd1['not'] = function() {
      return stack.push(digit(stack.pop() === 0));
    };
    cmd1['inv'] = function() {
      return stack.push(1 / stack.pop());
    };
    cmd1['chs'] = function() {
      return stack.push(-stack.pop());
    };
    cmd1['abs'] = function() {
      return stack.push(abs(stack.pop()));
    };
    cmd1['sqrt'] = function() {
      return stack.push(sqrt(stack.pop()));
    };
    cmd1['rot'] = function() {
      return stack.push(stack.shift());
    };
    cmd1['~'] = function() {
      return stack.push(~stack.pop());
    };
    cmd1['biti'] = function() {
      return stack.push(stack.pop() >> i & 1);
    };
    cmd1['bitj'] = function() {
      return stack.push(stack.pop() >> j & 1);
    };
    cmd1['bitk'] = function() {
      return stack.push(stack.pop() >> k & 1);
    };
    cmd1['bitij'] = function() {
      var bits;
      bits = stack.pop();
      return stack = stack.concat([bits >> i & 1, bits >> j & 1]);
    };
    cmd1['bitik'] = function() {
      var bits;
      bits = stack.pop();
      return stack = stack.concat([bits >> i & 1, bits >> k & 1]);
    };
    cmd1['bitjk'] = function() {
      var bits;
      bits = stack.pop();
      return stack = stack.concat([bits >> j & 1, bits >> k & 1]);
    };
    cmd1['bitijk'] = function() {
      var bits;
      bits = stack.pop();
      return stack = stack.concat([bits >> i & 1, bits >> j & 1, bits >> k & 1]);
    };
    cmd2['swap'] = function() {
      var n, ref;
      n = stack.length - 1;
      return ref = [stack[n], stack[n - 1]], stack[n - 1] = ref[0], stack[n] = ref[1], ref;
    };
    cmd2['<'] = function() {
      return stack.push(digit(stack.pop() > stack.pop()));
    };
    cmd2['>'] = function() {
      return stack.push(digit(stack.pop() < stack.pop()));
    };
    cmd2['=='] = function() {
      return stack.push(digit(stack.pop() === stack.pop()));
    };
    cmd2['<='] = function() {
      return stack.push(digit(stack.pop() >= stack.pop()));
    };
    cmd2['>='] = function() {
      return stack.push(digit(stack.pop() <= stack.pop()));
    };
    cmd2['!='] = function() {
      return stack.push(digit(stack.pop() !== stack.pop()));
    };
    cmd2['+'] = function() {
      return stack.push(stack.pop() + stack.pop());
    };
    cmd2['-'] = function() {
      return stack.push(-stack.pop() + stack.pop());
    };
    cmd2['*'] = function() {
      return stack.push(stack.pop() * stack.pop());
    };
    cmd2['/'] = function() {
      var a;
      a = stack.pop();
      return stack.push(stack.pop() / a);
    };
    cmd2['//'] = function() {
      var a;
      a = stack.pop();
      return stack.push(Math.floor(stack.pop() / a));
    };
    cmd2['%'] = function() {
      var a;
      a = stack.pop();
      return stack.push(stack.pop() % a);
    };
    cmd2['%%'] = function() {
      var a;
      a = stack.pop();
      return stack.push(modulo(stack.pop(), a));
    };
    cmd2['bit'] = function() {
      return stack.push(stack.pop() >> stack.pop() & 1);
    };
    cmd2['&'] = function() {
      return stack.push(stack.pop() & stack.pop());
    };
    cmd2['|'] = function() {
      return stack.push(stack.pop() | stack.pop());
    };
    cmd2['^'] = function() {
      return stack.push(stack.pop() ^ stack.pop());
    };
    cmd2['>>'] = function() {
      var a;
      a = stack.pop();
      return stack.push(stack.pop() >> a);
    };
    cmd2['<<'] = function() {
      var a;
      a = stack.pop();
      return stack.push(stack.pop() << a);
    };
    cmd2['and'] = function() {
      var a, b, ref;
      ref = [stack.pop(), stack.pop()], a = ref[0], b = ref[1];
      return stack.push(digit(a !== 0 && b !== 0));
    };
    cmd2['or'] = function() {
      var a, b, ref;
      ref = [stack.pop(), stack.pop()], a = ref[0], b = ref[1];
      return stack.push(digit(a !== 0 || b !== 0));
    };
    return cmd2['xor'] = function() {
      var a, b;
      a = digit(stack.pop() !== 0);
      b = digit(stack.pop() !== 0);
      return stack.push(digit(a + b === 1));
    };
  };
})(this);

setup = function() {
  var c, code, f, index, l, len, p1, p2, p3, ref, results, sel1, sel2, sel3, sel4, sel5, sel6, sel7, sel8, tabell;
  c = createCanvas(500, 500, WEBGL);
  c.parent('canvas');
  buildCommands();
  code = $('#code');
  sel1 = $('#sel1');
  sel2 = $('#sel2');
  sel3 = $('#sel3');
  sel4 = $('#sel4');
  sel5 = $('#sel5');
  sel6 = $('#sel6');
  sel7 = $('#sel7');
  sel8 = $('#sel8');
  tabell = $('#tabell');
  p1 = $('#p1');
  p2 = $('#p2');
  p3 = $('#p3');
  fillSelect(sel1, ['free'].concat(range(0, 360, 15)));
  fillSelect(sel2, ['free'].concat(range(0, 360, 15)));
  fillSelect(sel3, range(1, 26));
  fillSelect(sel4, range(25));
  fillSelect(sel5, range(10));
  fillSelect(sel6, range(10));
  fillSelect(sel7, range(10));
  fillSelect(sel8, range(10));
  frameRate(10);
  sel1.val("free").change();
  sel2.val("free").change();
  sel3.val("10").change();
  sel4.val("10").change();
  sel5.val("0").change();
  sel6.val("0").change();
  sel7.val("0").change();
  sel8.val("0").change();
  trace();
  f = 255 / (N - 1);
  ref = range(N);
  results = [];
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    results.push((function() {
      var len1, m, ref1, results1;
      ref1 = range(N);
      results1 = [];
      for (m = 0, len1 = ref1.length; m < len1; m++) {
        j = ref1[m];
        results1.push((function() {
          var len2, o, ref2, results2;
          ref2 = range(N);
          results2 = [];
          for (o = 0, len2 = ref2.length; o < len2; o++) {
            k = ref2[o];
            index = N * N * k + N * j + i;
            pg[index] = createGraphics(1, 1);
            results2.push(pg[index].background(f * i, f * j, f * k));
          }
          return results2;
        })());
      }
      return results1;
    })());
  }
  return results;
};

digit = function(bool) {
  if (bool) {
    return 1;
  } else {
    return 0;
  }
};

evaluate = function(traceFlag, line, level) {
  var arr, cmd, l, len, nr, results;
  if (level == null) {
    level = '';
  }
  arr = line.split(' ');
  results = [];
  for (l = 0, len = arr.length; l < len; l++) {
    cmd = arr[l];
    if (cmd === '') {

    } else if (words[cmd] != null) {
      results.push(evaluate(traceFlag, words[cmd], level + cmd + '.'));
    } else if (cmd2[cmd] != null) {
      if (stack.length < 2) {
        throw [level + cmd, 'Stack Underflow'];
      }
      cmd2[cmd]();
      if (traceFlag === true) {
        results.push(tableAppend(tabell, level + cmd, '[' + stack.join(',') + ']'));
      } else {
        results.push(void 0);
      }
    } else if (cmd1[cmd] != null) {
      if (stack.length < 1) {
        throw [level + cmd, 'Stack Underflow'];
      }
      cmd1[cmd]();
      if (traceFlag === true) {
        results.push(tableAppend(tabell, level + cmd, '[' + stack.join(',') + ']'));
      } else {
        results.push(void 0);
      }
    } else if (cmd0[cmd] != null) {
      cmd0[cmd]();
      if (traceFlag === true) {
        results.push(tableAppend(tabell, level + cmd, '[' + stack.join(',') + ']'));
      } else {
        results.push(void 0);
      }
    } else {
      nr = parseFloat(cmd);
      if (_.isNumber(nr) && !_.isNaN(nr)) {
        stack.push(nr);
        if (traceFlag === true) {
          results.push(tableAppend(tabell, level + cmd, '[' + stack.join(',') + ']'));
        } else {
          results.push(void 0);
        }
      } else {
        throw [level + cmd, 'Unknown symbol'];
      }
    }
  }
  return results;
};

calc = function(traceFlag) {
  var arr, cmd, e, l, len, line, lines, message;
  if (traceFlag == null) {
    traceFlag = false;
  }
  stack = [];
  lines = code.value.split("\n");
  try {
    for (l = 0, len = lines.length; l < len; l++) {
      line = lines[l];
      if (line.indexOf(':') === 0) {
        arr = line.split(' ');
        if (arr.length === 3 && arr[2] === ';') {
          delete words[arr[1]];
        } else {
          words[arr[1]] = arr.slice(2, -1).join(' ');
        }
      } else {
        evaluate(traceFlag, line);
      }
    }
    return 0 !== _.last(stack);
  } catch (error) {
    e = error;
    if (traceFlag === true) {
      cmd = e[0], message = e[1];
      return tableAppend(tabell, cmd, message);
    }
  }
};

mousePressed = function() {
  if ((0 < mouseX && mouseX < width)) {
    lightX = mouseX;
  }
  if ((0 < mouseY && mouseY < height)) {
    return lightY = mouseY;
  }
};

draw = function() {
  var count, index, l, len, len1, len2, locX, locY, m, o, ref, ref1, ref2;
  if (sel4.value === '0') {
    return;
  }
  bg(0.5);
  if ((0 < mouseX && mouseX < width) && (0 < mouseY && mouseY < height)) {
    locY = (0.5 - mouseY / height) * 2;
    locX = (mouseX / width - 0.5) * 2;
  } else {
    locY = (0.5 - lightY / height) * 2;
    locX = (lightX / width - 0.5) * 2;
  }
  pointLight(255, 255, 255, locX, locY, 0);
  if (sel1.value === 'free') {
    yVinkel += sel4.value / 500;
    yVinkel %= TWO_PI;
    rotateY(yVinkel);
  } else {
    rotateY(radians(sel1.value));
  }
  if (sel2.value === 'free') {
    xVinkel += sel4.value / 500;
    xVinkel %= TWO_PI;
    rotateX(xVinkel);
  } else {
    rotateX(radians(sel2.value));
  }
  t = frameCount;
  count = 0;
  ref = range(N);
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    ref1 = range(N);
    for (m = 0, len1 = ref1.length; m < len1; m++) {
      j = ref1[m];
      ref2 = range(N);
      for (o = 0, len2 = ref2.length; o < len2; o++) {
        k = ref2[o];
        push();
        translate(SIZE * (0.5 + i - N / 2), SIZE * (0.5 + j - N / 2), SIZE * (0.5 + k - N / 2));
        if (calc()) {
          index = N * N * k + N * j + i;
          texture(pg[index]);
          box(SIZE, SIZE, SIZE);
          count++;
        } else {
          texture(pg[N * N * N - 1]);
          box(2, 2, 2);
        }
        pop();
      }
    }
  }
  p1.innerHTML = 'Words: ' + code.value.replace(/\n/g, ' ').split(' ').length;
  p2.innerHTML = 'Cubes: ' + count;
  if (millis() > timestamp) {
    p3.innerHTML = 'FPS: ' + int(frameRate());
    return timestamp = millis() + 1000;
  }
};

tableClear = function() {
  return $("#tabell tr").remove();
};

tableAppend = function(t, a, b) {
  var cell1, cell2, row;
  row = t.insertRow(-1);
  cell1 = row.insertCell(-1);
  cell2 = row.insertCell(-1);
  cell1.innerHTML = a;
  return cell2.innerHTML = b;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\github\p5Forth3D\coffee\sketch.coffee