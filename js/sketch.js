// Generated by CoffeeScript 1.11.1
var Button, Exercise, NormalButton, btnDims, btnLevel, btnRotate, btni, btnj, btnk, btnn, btnt, buildCommands, calc, calcCubes, calcWords, cmd0, cmd1, cmd2, cmd3, codechange, countChar, digit, displayDebug, draw, drawOne, evaluate, exercise, fetch, gcd, handler, i, j, k, lastX, lastY, linkAppend, mouseDragged, mousePressed, rstack, saveCanvasCount, setDefault, setDefaults, setLevel, setup, showError, showStack, stack, standard, store, tableAppend, tableClear, timestamp, trace, vinkelX, vinkelY, words,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

store = function(name, value) {
  var Size, ref;
  if (localStorage["Forth3D/settings/" + name] === value) {
    return;
  }
  localStorage["Forth3D/settings/" + name] = value;
  if (name === 'debug') {
    displayDebug();
  }
  if (name === 'font') {
    document.getElementById("code").style.fontSize = fetch('font') + 'px';
  }
  if (name === 'n') {
    if ((ref = fetch('dims')) === '1D' || ref === '2D') {
      Size = 250;
    } else {
      Size = 200;
    }
    store('SIZE', int(Size / fetch('n')));
  }
  if (name === 'fps') {
    frameRate(fetch('fps'));
  }
  if (name === 'i' || name === 'j' || name === 'k' || name === 'rotate' || name === 'grid' || name === 'figure') {
    return trace();
  }
};

fetch = function(name) {
  var s;
  s = localStorage["Forth3D/settings/" + name];
  if (name === 'fps' || name === 'font' || name === 'i' || name === 'j' || name === 'k') {
    return int(s);
  }
  return s;
};

displayDebug = (function(_this) {
  return function() {
    var control;
    btni.visible(fetch('debug') === 'yes');
    btnj.visible(fetch('debug') === 'yes' && fetch('dims') >= '2D');
    btnk.visible(fetch('debug') === 'yes' && fetch('dims') >= '3D');
    control = $('#tabell');
    if (fetch('debug') === 'yes') {
      return control.show();
    } else {
      return control.hide();
    }
  };
})(this);

setDefault = function(name, value) {
  if (localStorage["Forth3D/settings/" + name] == null) {
    return localStorage["Forth3D/settings/" + name] = value;
  }
};

setDefaults = function() {
  setDefault('font', 32);
  setDefault('n', 2);
  setDefault('fps', 10);
  setDefault('SIZE', 200 / fetch('n'));
  setDefault('dims', '1D');
  setDefault('size', '1.0');
  setDefault('level', 'a01');
  setDefault('figure', 'sphere');
  setDefault('grid', 'yes');
  setDefault('rotate', 'no');
  setDefault('debug', 'no');
  setDefault('i', 0);
  setDefault('j', 0);
  return setDefault('k', 0);
};

handler = function() {
  var ref;
  if (this.name() === 'snapshot') {
    return saveCanvasCount++;
  } else if ((ref = this.name()) === 'i' || ref === 'j' || ref === 'k' || ref === 'fps' || ref === 'font') {
    return store(this.name(), int(this.value()));
  } else if (this.name() === 'n') {
    store(this.name(), this.value());
    btni.setLst(range(fetch('n')));
    btnj.setLst(range(fetch('n')));
    return btnk.setLst(range(fetch('n')));
  } else if (this.name() === 'level') {
    return setLevel();
  } else {
    return store(this.name(), this.value());
  }
};

Button = (function() {
  function Button(x, y, w, h, txt, lst1, val, wrap, action) {
    this.lst = lst1;
    this.wrap = wrap;
    this.action = action;
    this.index = this.lst.indexOf(val);
    this.button1 = createButton(txt);
    this.button1.position(x, y);
    this.button1.size(w, h);
    this.button2 = createButton(this.value());
    this.button2.position(x + w, y);
    this.button2.size(w, h);
    this.button1.mousePressed((function(_this) {
      return function() {
        if (_this.wrap) {
          _this.index = modulo(_this.index - 1, _this.lst.length);
        } else if (_this.index > 0) {
          _this.index--;
        }
        _this.button2.html(_this.value());
        return _this.action();
      };
    })(this));
    this.button2.mousePressed((function(_this) {
      return function() {
        if (_this.wrap) {
          _this.index = modulo(_this.index + 1, _this.lst.length);
        } else if (_this.index < _this.lst.length - 1) {
          _this.index++;
        }
        _this.button2.html(_this.value());
        return _this.action();
      };
    })(this));
  }

  Button.prototype.name = function() {
    return this.button1.elt.innerText;
  };

  Button.prototype.value = function() {
    return this.lst[this.index];
  };

  Button.prototype.set = function(value) {
    this.index = this.lst.indexOf(value);
    return this.button2.html(this.value());
  };

  Button.prototype.setLst = function(lst) {
    this.lst = lst;
    if (this.index >= this.lst.length) {
      this.index = this.lst.length - 1;
      return this.button2.html(this.value());
    }
  };

  Button.prototype.visible = function(b) {
    if (b) {
      this.button1.show();
    } else {
      this.button1.hide();
    }
    if (b) {
      return this.button2.show();
    } else {
      return this.button2.hide();
    }
  };

  Button.prototype.disabled = function(b) {
    this.button1.elt.disabled = b;
    return this.button2.elt.disabled = b;
  };

  return Button;

})();

NormalButton = (function() {
  function NormalButton(x, y, w, h, txt, action) {
    this.action = action;
    this.button = createButton(txt);
    this.button.position(x, y);
    this.button.size(w, h);
    this.button.mousePressed((function(_this) {
      return function() {
        return _this.action();
      };
    })(this));
  }

  NormalButton.prototype.name = function() {
    return this.button.elt.innerText;
  };

  return NormalButton;

})();

Exercise = (function() {
  function Exercise(level1) {
    var current;
    this.level = level1;
    current = data[this.level];
    this.dims = current[1];
    this.n = current[2];
    this.code_a = current[3];
    this.code_b = localStorage['Forth3D/code/' + this.level];
    if (this.code_b == null) {
      this.code_b = '';
    }
    this.update();
  }

  Exercise.prototype.update = function() {
    var cubes, diff, key, l, len1, ref, tmp, totalScore;
    this.words_a = calcWords(this.code_a);
    this.words_b = calcWords(this.code_b);
    this.pattern_a = calcCubes(this.code_a);
    this.pattern_b = calcCubes(this.code_b);
    if (this.pattern_a === this.pattern_b) {
      this.score = 10;
      diff = this.words_a - this.words_b;
      if (diff > 0) {
        this.score += 10 * diff;
      } else {
        this.score += diff;
      }
      if (this.score <= 0) {
        this.score = 1;
      }
    } else {
      this.score = 0;
    }
    localStorage['Forth3D/score/' + this.level] = this.score;
    score.innerHTML = 'Score: ' + this.score;
    if (this.score === 0) {
      score.style.color = 'red';
    } else if (this.score >= 10) {
      score.style.color = 'lightgreen';
    } else {
      score.style.color = 'yellow';
    }
    words1.innerHTML = this.words_a;
    words2.innerHTML = this.words_b;
    words2.style.color = this.words_a >= this.words_b ? 'lightgreen' : 'red';
    cubes1.innerHTML = countChar(this.pattern_a, '1');
    cubes = countChar(this.pattern_b, '1');
    cubes2.innerHTML = cubes;
    cubes2.style.color = this.pattern_a === this.pattern_b ? 'lightgreen' : 'red';
    totalScore = 0;
    ref = _.keys(data);
    for (l = 0, len1 = ref.length; l < len1; l++) {
      key = ref[l];
      tmp = localStorage['Forth3D/score/' + key];
      if (tmp != null) {
        totalScore += int(tmp);
      }
    }
    return total.innerHTML = 'Total: ' + totalScore;
  };

  return Exercise;

})();

countChar = function(s, ch) {
  var c, count, l, len1;
  count = 0;
  for (l = 0, len1 = s.length; l < len1; l++) {
    c = s[l];
    if (c === ch) {
      count++;
    }
  }
  return count;
};

vinkelX = 90;

vinkelY = 0;

lastX = 0;

lastY = 0;

cmd0 = {};

cmd1 = {};

cmd2 = {};

cmd3 = {};

stack = [];

rstack = [];

timestamp = 0;

words = {};

saveCanvasCount = 0;

exercise = null;

i = 0;

j = 0;

k = 0;

btni = null;

btnj = null;

btnk = null;

btnt = null;

btnDims = null;

btnn = null;

btnRotate = null;

btnLevel = null;

codechange = function(textarea) {
  localStorage['Forth3D/code/' + fetch('level')] = textarea.value;
  exercise.code_b = textarea.value;
  exercise.update();
  return trace();
};

trace = function() {
  tableClear();
  tableAppend(tabell, 'command', 'stack');
  i = btni.value();
  j = btnj.value();
  k = btnk.value();
  return calc(code.value, true);
};

linkAppend = function(t, link, text) {
  var cell1, d, dd, row, s;
  d = function(s) {
    return "'" + s + "'";
  };
  dd = function(s) {
    return '"' + s + '"';
  };
  row = t.insertRow(-1);
  cell1 = row.insertCell(-1);
  s = '<x href=' + d(link);
  s += ' target=' + d('_blank');
  s += ' onmouseover=' + d('this.style.color=' + dd('yellow') + ';');
  s += ' onmouseout=' + d('this.style.color=' + dd('black') + ';');
  s += '>';
  s += text;
  s += '</x>';
  return cell1.innerHTML = s;
};

buildCommands = function() {
  cmd0['i'] = (function(_this) {
    return function() {
      return [i];
    };
  })(this);
  cmd0['j'] = (function(_this) {
    return function() {
      return [j];
    };
  })(this);
  cmd0['k'] = (function(_this) {
    return function() {
      return [k];
    };
  })(this);
  cmd0['pop'] = (function(_this) {
    return function() {
      return [rstack.pop()];
    };
  })(this);
  cmd1['push'] = (function(_this) {
    return function(x) {
      rstack.push(x);
      return [];
    };
  })(this);
  cmd1['drop'] = (function(_this) {
    return function(x) {
      return [];
    };
  })(this);
  cmd1['dup'] = (function(_this) {
    return function(x) {
      return [x, x];
    };
  })(this);
  cmd1['not'] = (function(_this) {
    return function(x) {
      return [digit(x === 0)];
    };
  })(this);
  cmd1['inv'] = (function(_this) {
    return function(x) {
      return [1 / x];
    };
  })(this);
  cmd1['chs'] = (function(_this) {
    return function(x) {
      return [-x];
    };
  })(this);
  cmd1['sign'] = (function(_this) {
    return function(x) {
      return [Math.sign(x)];
    };
  })(this);
  cmd1['abs'] = (function(_this) {
    return function(x) {
      return [abs(x)];
    };
  })(this);
  cmd1['sqrt'] = (function(_this) {
    return function(x) {
      return [sqrt(x)];
    };
  })(this);
  cmd1['rot'] = (function(_this) {
    return function(x) {
      return [x];
    };
  })(this);
  cmd1['~'] = (function(_this) {
    return function(x) {
      return [~x];
    };
  })(this);
  cmd1['biti'] = (function(_this) {
    return function(x) {
      return [x >> i & 1];
    };
  })(this);
  cmd1['bitj'] = (function(_this) {
    return function(x) {
      return [x >> j & 1];
    };
  })(this);
  cmd1['bitk'] = (function(_this) {
    return function(x) {
      return [x >> k & 1];
    };
  })(this);
  cmd1['bitij'] = (function(_this) {
    return function(x) {
      return [x >> i & 1, x >> j & 1];
    };
  })(this);
  cmd1['bitik'] = (function(_this) {
    return function(x) {
      return [x >> i & 1, x >> k & 1];
    };
  })(this);
  cmd1['bitjk'] = (function(_this) {
    return function(x) {
      return [x >> j & 1, x >> k & 1];
    };
  })(this);
  cmd1['bitijk'] = (function(_this) {
    return function(x) {
      return [x >> i & 1, x >> j & 1, x >> k & 1];
    };
  })(this);
  cmd2['swap'] = (function(_this) {
    return function(x, y) {
      return [x, y];
    };
  })(this);
  cmd2['<'] = (function(_this) {
    return function(x, y) {
      return [digit(y < x)];
    };
  })(this);
  cmd2['>'] = (function(_this) {
    return function(x, y) {
      return [digit(y > x)];
    };
  })(this);
  cmd2['='] = (function(_this) {
    return function(x, y) {
      return [digit(y === x)];
    };
  })(this);
  cmd2['<='] = (function(_this) {
    return function(x, y) {
      return [digit(y <= x)];
    };
  })(this);
  cmd2['>='] = (function(_this) {
    return function(x, y) {
      return [digit(y >= x)];
    };
  })(this);
  cmd2['<>'] = (function(_this) {
    return function(x, y) {
      return [digit(y !== x)];
    };
  })(this);
  cmd2['+'] = (function(_this) {
    return function(x, y) {
      return [y + x];
    };
  })(this);
  cmd2['-'] = (function(_this) {
    return function(x, y) {
      return [y - x];
    };
  })(this);
  cmd2['*'] = (function(_this) {
    return function(x, y) {
      return [y * x];
    };
  })(this);
  cmd2['**'] = (function(_this) {
    return function(x, y) {
      return [Math.pow(y, x)];
    };
  })(this);
  cmd2['/'] = (function(_this) {
    return function(x, y) {
      return [y / x];
    };
  })(this);
  cmd2['//'] = (function(_this) {
    return function(x, y) {
      return [Math.floor(y / x)];
    };
  })(this);
  cmd2['%'] = (function(_this) {
    return function(x, y) {
      return [y % x];
    };
  })(this);
  cmd2['%%'] = (function(_this) {
    return function(x, y) {
      return [modulo(y, x)];
    };
  })(this);
  cmd2['gcd'] = (function(_this) {
    return function(x, y) {
      return [gcd(y, x)];
    };
  })(this);
  cmd2['bit'] = (function(_this) {
    return function(x, y) {
      return [x >> y & 1];
    };
  })(this);
  cmd2['&'] = (function(_this) {
    return function(x, y) {
      return [y & x];
    };
  })(this);
  cmd2['|'] = (function(_this) {
    return function(x, y) {
      return [y | x];
    };
  })(this);
  cmd2['^'] = (function(_this) {
    return function(x, y) {
      return [y ^ x];
    };
  })(this);
  cmd2['>>'] = (function(_this) {
    return function(x, y) {
      return [y >> x];
    };
  })(this);
  cmd2['<<'] = (function(_this) {
    return function(x, y) {
      return [y << x];
    };
  })(this);
  cmd2['and'] = (function(_this) {
    return function(x, y) {
      return [digit(y !== 0 && x !== 0)];
    };
  })(this);
  cmd2['or'] = (function(_this) {
    return function(x, y) {
      return [digit(y !== 0 || x !== 0)];
    };
  })(this);
  cmd2['xor'] = (function(_this) {
    return function(x, y) {
      return [digit(y + x === 1)];
    };
  })(this);
  cmd2['2dup'] = (function(_this) {
    return function(x, y) {
      return [y, x, y, x];
    };
  })(this);
  cmd3['rot'] = (function(_this) {
    return function(x, y, z) {
      return [y, x, z];
    };
  })(this);
  return cmd3['-rot'] = (function(_this) {
    return function(x, y, z) {
      return [x, z, y];
    };
  })(this);
};

standard = function(name, value) {
  if (localStorage[name] != null) {
    return localStorage[name];
  } else {
    return value;
  }
};

setup = function() {
  var c, code, p3, tabell;
  c = createCanvas(400, 800, WEBGL);
  c.parent('canvas');
  buildCommands();
  code = $('#code');
  tabell = $('#tabell');
  p3 = $('#p3');
  setDefaults();
  btnDims = new Button(0, 0, 50, 20, 'dims', ['1D', '2D', '3D'], fetch('dims'), null);
  btnn = new Button(0, 20, 50, 20, 'n', range(2, 28), fetch('n'), null);
  new Button(0, 40, 50, 20, 'size', '0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0'.split(' '), fetch('size'), true, handler);
  new Button(0, 60, 50, 20, 'fps', range(26), fetch('fps'), true, handler);
  new Button(0, 80, 50, 20, 'font', range(16, 40, 2), fetch('font'), true, handler);
  new Button(120, 0, 50, 20, 'figure', 'sphere box'.split(' '), fetch('figure'), true, handler);
  btnRotate = new Button(120, 20, 50, 20, 'rotate', 'yes no'.split(' '), fetch('rotate'), true, handler);
  new Button(120, 40, 50, 20, 'grid', 'yes no'.split(' '), fetch('grid'), true, handler);
  new Button(120, 60, 50, 20, 'debug', 'yes no'.split(' '), fetch('debug'), true, handler);
  new NormalButton(120, 80, 100, 20, 'snapshot', handler);
  btni = new Button(120, 120, 50, 20, 'i', range(fetch('n')), fetch('i'), true, handler);
  btnj = new Button(120, 140, 50, 20, 'j', range(fetch('n')), fetch('j'), true, handler);
  btnk = new Button(120, 160, 50, 20, 'k', range(fetch('n')), fetch('k'), true, handler);
  btnLevel = new Button(60, 220, 50, 20, 'level', _.keys(data), fetch('level'), false, handler);
  btnDims.disabled(true);
  btnn.disabled(true);
  btni.button1.style('color', 'white');
  btnj.button1.style('color', 'white');
  btnk.button1.style('color', 'white');
  btni.button1.style('background-color', 'red');
  btnj.button1.style('background-color', 'green');
  btnk.button1.style('background-color', 'blue');
  store('font', fetch('font'));
  store('fps', fetch('fps'));
  setLevel();
  displayDebug();
  return texture(createGraphics(1, 1));
};

setLevel = function() {
  var current, ref, ref1, ref2, source;
  source = localStorage['Forth3D/code/' + fetch('level')];
  code.value = source != null ? source : '';
  current = data[fetch('level')];
  store('dims', current[1]);
  store('n', current[2]);
  exercise = new Exercise(fetch('level'));
  btnDims.set(current[1]);
  if ((ref = fetch('dims')) === '1D' || ref === '2D') {
    btnRotate.set('no');
    store('rotate', 'no');
  }
  btnRotate.disabled((ref1 = fetch('dims')) === '1D' || ref1 === '2D');
  btnn.set(current[2]);
  if ((ref2 = fetch('dims')) === '1D' || ref2 === '2D') {
    vinkelX = 90;
    vinkelY = 0;
  }
  if (fetch('dims') === '3D') {
    vinkelX = 45;
    vinkelY = 45;
  }
  return trace();
};

digit = function(bool) {
  if (bool) {
    return 1;
  } else {
    return 0;
  }
};

showStack = function(level, cmd) {
  return tableAppend(tabell, level + cmd, stack.join(' '));
};

showError = function(e) {
  return tableAppend(tabell, e[0], e[1], '#FF0000');
};

gcd = function(x, y) {
  if (y === 0) {
    return x;
  } else {
    return gcd(y, x % y);
  }
};

mousePressed = function() {
  if ((0 < mouseX && mouseX < width) && (0 < mouseY && mouseY < height) && fetch('dims') === '3D') {
    lastX = mouseX;
    return lastY = mouseY;
  }
};

mouseDragged = function() {
  var dx, dy;
  if ((0 < mouseX && mouseX < width) && (0 < mouseY && mouseY < height) && fetch('dims') === '3D') {
    dx = mouseX - lastX;
    dy = mouseY - lastY;
    vinkelX += dx / 4;
    vinkelY += dy / 4;
    lastX = mouseX;
    return lastY = mouseY;
  }
};

evaluate = function(traceFlag, line, level) {
  var arr, cmd, l, len1, nr, results;
  if (level == null) {
    level = '';
  }
  arr = line.split(' ');
  results = [];
  for (l = 0, len1 = arr.length; l < len1; l++) {
    cmd = arr[l];
    if (cmd === '') {

    } else if (words[cmd] != null) {
      if (level.indexOf('.' + cmd + '.') !== -1) {
        throw [level + cmd, 'Recursion not allowed'];
      }
      results.push(evaluate(traceFlag, words[cmd], level + cmd + '.'));
    } else if (cmd3[cmd] != null) {
      if (stack.length < 3) {
        throw [level + cmd, 'Stack Underflow'];
      }
      stack = stack.concat(cmd3[cmd](stack.pop(), stack.pop(), stack.pop()));
      if (traceFlag) {
        results.push(showStack(level, cmd));
      } else {
        results.push(void 0);
      }
    } else if (cmd2[cmd] != null) {
      if (stack.length < 2) {
        throw [level + cmd, 'Stack Underflow'];
      }
      stack = stack.concat(cmd2[cmd](stack.pop(), stack.pop()));
      if (traceFlag) {
        results.push(showStack(level, cmd));
      } else {
        results.push(void 0);
      }
    } else if (cmd1[cmd] != null) {
      if (stack.length < 1) {
        throw [level + cmd, 'Stack Underflow'];
      }
      stack = stack.concat(cmd1[cmd](cmd === 'rot' ? stack.shift() : stack.pop()));
      if (traceFlag) {
        results.push(showStack(level, cmd));
      } else {
        results.push(void 0);
      }
    } else if (cmd0[cmd] != null) {
      stack = stack.concat(cmd0[cmd]());
      if (traceFlag) {
        results.push(showStack(level, cmd));
      } else {
        results.push(void 0);
      }
    } else {
      nr = parseFloat(cmd);
      if (_.isNumber(nr) && !_.isNaN(nr)) {
        stack.push(nr);
        if (traceFlag) {
          results.push(showStack(level, cmd));
        } else {
          results.push(void 0);
        }
      } else {
        throw [level + cmd, 'Unknown Word'];
      }
    }
  }
  return results;
};

calc = function(sourcecode, traceFlag) {
  var arr, cmd, defWords, e, l, len1, state, stateStack;
  if (traceFlag == null) {
    traceFlag = false;
  }
  words = {};
  stack = [];
  rstack = [];
  arr = sourcecode.replace(/\n/g, ' ').split(' ');
  state = 'normal';
  defWords = [];
  stateStack = [];
  try {
    for (l = 0, len1 = arr.length; l < len1; l++) {
      cmd = arr[l];
      if (cmd === '(') {
        stateStack.push('(');
      }
      if (cmd === '') {
        continue;
      }
      if (cmd === ':') {
        stateStack.push(':');
      }
      if (_.last(stateStack) === '(') {
        if (cmd === ')') {
          stateStack.pop();
        }
      } else if (_.last(stateStack) === ':') {
        defWords.push(cmd);
        if (cmd === ';') {
          if (defWords.length === 3) {
            delete words[defWords[0]];
          } else {
            words[defWords[1]] = defWords.slice(2, -1).join(' ');
          }
          defWords = [];
          stateStack.pop();
        }
      } else {
        evaluate(traceFlag, cmd);
      }
    }
    return stack.length === 1 && 1 === _.last(stack);
  } catch (error) {
    e = error;
    if (traceFlag) {
      return showError(e);
    }
  }
};

draw = function() {
  bg(0.5);
  ambientLight(128, 128, 128);
  pointLight(255, 255, 255, 0.5, 0.5, 0.25);
  push();
  drawOne(exercise.pattern_a, -200, 16, words1, cubes1);
  pop();
  push();
  drawOne(exercise.pattern_b, 200, -16, words2, cubes2);
  pop();
  if (saveCanvasCount > 0) {
    saveCanvas('p5Forth3D', 'png');
    return saveCanvasCount--;
  }
};

drawOne = function(pattern, yOffset, vOffset, words, cubes) {
  var count, drawCurrent, drawFigure, f, index, jvalues, kvalues, l, len1, len2, len3, m, n, o, ref, scaling, showAxes, size, x, y, z;
  drawFigure = (function(_this) {
    return function(s) {
      var u;
      s = _.max([int(s), 5]);
      u = int(s / 2);
      if (fetch('figure') === 'sphere') {
        return sphere(u, u, u);
      } else {
        return box(s, s, s);
      }
    };
  })(this);
  showAxes = (function(_this) {
    return function() {
      var i0, j0, k0, len, n, size, x, y, z;
      if (fetch('debug') === 'no') {
        return;
      }
      i0 = 0;
      j0 = 0;
      k0 = 0;
      size = fetch('SIZE');
      n = fetch('n');
      len = size * (n - 1);
      x = size * (0.5 + i0 - n / 2);
      y = size * (0.5 + (n - 1 - j0) - n / 2);
      z = size * (0.5 + k0 - n / 2);
      push();
      translate(z, y, x);
      push();
      translate(0, 0, -x);
      rotateX(radians(90));
      specularMaterial(255, 0, 0);
      cylinder(size / 50, len);
      pop();
      if (fetch('dims') >= '2D') {
        push();
        translate(0, -y, 0);
        specularMaterial(0, 255, 0);
        cylinder(size / 50, len);
        pop();
      }
      if (fetch('dims') === '3D') {
        push();
        translate(-z, 0, 0);
        rotateZ(radians(90));
        specularMaterial(0, 0, 255);
        cylinder(size / 50, len);
        pop();
      }
      return pop();
    };
  })(this);
  drawCurrent = (function(_this) {
    return function(radius, len) {
      var i0, j0, k0;
      if (fetch('debug') === 'no') {
        return;
      }
      i0 = fetch('i');
      j0 = fetch('j');
      k0 = fetch('k');
      if ((i0 === i && j0 === j && k0 === k) === false) {
        return;
      }
      push();
      rotateX(radians(90));
      specularMaterial(255, 0, 0);
      cylinder(radius, len * 1.05);
      pop();
      push();
      specularMaterial(0, 255, 0);
      cylinder(radius, len * 1.05);
      pop();
      push();
      rotateZ(radians(90));
      specularMaterial(0, 0, 255);
      cylinder(radius, len * 1.05);
      return pop();
    };
  })(this);
  if (fetch('fps') === 0) {
    return;
  }
  trace();
  if (fetch('rotate') === 'yes') {
    vinkelY += 1;
    vinkelX += 0.5;
  }
  translate(0, yOffset, 0);
  rotateX(radians(vinkelY + vOffset));
  rotateY(radians(vinkelX));
  count = 0;
  scaling = parseFloat(fetch('size'));
  size = fetch('SIZE');
  n = fetch('n');
  jvalues = fetch('dims') === '1D' ? range(1) : range(n);
  kvalues = fetch('dims') <= '2D' ? range(1) : range(n);
  index = 0;
  ref = range(n);
  for (l = 0, len1 = ref.length; l < len1; l++) {
    i = ref[l];
    for (m = 0, len2 = jvalues.length; m < len2; m++) {
      j = jvalues[m];
      for (o = 0, len3 = kvalues.length; o < len3; o++) {
        k = kvalues[o];
        push();
        x = size * (0.5 + i - n / 2);
        y = size * (0.5 + (n - 1 - j) - n / 2);
        z = size * (0.5 + k - n / 2);
        translate(z, y, x);
        f = 255 / (n - 1);
        specularMaterial(f * i, f * j, f * k);
        if (pattern[index] === '1') {
          drawFigure(scaling * size);
          drawCurrent(scaling * 2 * size / 10, scaling * size);
          count++;
        } else {
          if (fetch('grid') === 'yes') {
            drawFigure(scaling * size / 5);
            drawCurrent(scaling * 2 * size / 50, scaling * size / 5);
          }
        }
        pop();
        index++;
      }
    }
  }
  showAxes();
  if (millis() > timestamp) {
    p3.innerHTML = "FPS: " + (nf(frameRate(), 0, 1));
    return timestamp = millis() + 1000;
  }
};

calcWords = function(sourcecode) {
  var arr, item;
  arr = sourcecode.replace(/\n/g, ' ').split(' ');
  arr = (function() {
    var l, len1, results;
    results = [];
    for (l = 0, len1 = arr.length; l < len1; l++) {
      item = arr[l];
      if (item.length > 0) {
        results.push(item);
      }
    }
    return results;
  })();
  return arr.length;
};

calcCubes = function(sourcecode) {
  var jvalues, kvalues, l, len1, len2, len3, m, n, o, ref, res;
  n = fetch('n');
  jvalues = fetch('dims') === '1D' ? range(1) : range(n);
  kvalues = fetch('dims') <= '2D' ? range(1) : range(n);
  res = '';
  ref = range(n);
  for (l = 0, len1 = ref.length; l < len1; l++) {
    i = ref[l];
    for (m = 0, len2 = jvalues.length; m < len2; m++) {
      j = jvalues[m];
      for (o = 0, len3 = kvalues.length; o < len3; o++) {
        k = kvalues[o];
        res += calc(sourcecode) ? '1' : '0';
      }
    }
  }
  return res;
};

tableClear = function() {
  return $("#tabell tr").remove();
};

tableAppend = function(t, x, b, col) {
  var cell1, cell2, row;
  if (col == null) {
    col = '#80808000';
  }
  row = t.insertRow(-1);
  cell1 = row.insertCell(-1);
  cell2 = row.insertCell(-1);
  cell1.innerHTML = x;
  cell2.innerHTML = b;
  cell1.style.backgroundColor = '#C0C0C000';
  cell2.style.color = '#FFFFFF';
  cell2.style.backgroundColor = col;
  return cell2.style.textAlign = 'right';
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\github\p5Forth3D\coffee\sketch.coffee