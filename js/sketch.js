// Generated by CoffeeScript 1.11.1
var N, SIZE, buildCommands, calc, cmd0, cmd1, cmd2, cmd3, codechange, digit, draw, evaluate, fillSelect, gcd, i, j, k, lightX, lightY, rstack, sel0click, sel15click, sel16click, sel17click, sel18click, sel3click, sel5click, sel6click, sel7click, sel8click, setup, showError, showStack, stack, t, tableAppend, tableClear, timestamp, trace, words,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

N = 10;

SIZE = 250 / N;

lightX = 250;

lightY = 250;

cmd0 = {};

cmd1 = {};

cmd2 = {};

cmd3 = {};

stack = [];

rstack = [];

i = 0;

j = 0;

k = 0;

t = 0;

timestamp = 0;

words = {};

fillSelect = function(sel, arr) {
  var key, l, len, results;
  sel.empty();
  results = [];
  for (l = 0, len = arr.length; l < len; l++) {
    key = arr[l];
    results.push(sel.append($("<option>").attr('value', key).text(key)));
  }
  return results;
};

codechange = function(sel) {
  return trace();
};

sel0click = function(sel) {};

sel3click = function(sel) {
  return frameRate(int(sel.value));
};

sel5click = function(sel) {};

sel6click = function(sel) {};

sel7click = function(sel) {};

sel8click = function(sel) {};

sel15click = function(sel) {
  return trace();
};

sel16click = function(sel) {
  return trace();
};

sel17click = function(sel) {
  return trace();
};

sel18click = function(sel) {
  return trace();
};

trace = function() {
  tableClear();
  tableAppend(tabell, 'command', 'stack');
  i = parseInt(sel15.value);
  j = parseInt(sel16.value);
  k = parseInt(sel17.value);
  t = parseInt(sel18.value);
  return calc(true);
};

buildCommands = function() {
  cmd0['i'] = (function(_this) {
    return function() {
      return [i];
    };
  })(this);
  cmd0['j'] = (function(_this) {
    return function() {
      return [j];
    };
  })(this);
  cmd0['k'] = (function(_this) {
    return function() {
      return [k];
    };
  })(this);
  cmd0['t'] = (function(_this) {
    return function() {
      return [t];
    };
  })(this);
  cmd0['pop'] = (function(_this) {
    return function() {
      return [rstack.pop()];
    };
  })(this);
  cmd1['push'] = (function(_this) {
    return function(a) {
      rstack.push(a);
      return [];
    };
  })(this);
  cmd1['drop'] = (function(_this) {
    return function(a) {
      return [];
    };
  })(this);
  cmd1['dup'] = (function(_this) {
    return function(a) {
      return [a, a];
    };
  })(this);
  cmd1['not'] = (function(_this) {
    return function(a) {
      return [digit(a === 0)];
    };
  })(this);
  cmd1['inv'] = (function(_this) {
    return function(a) {
      return [1 / a];
    };
  })(this);
  cmd1['chs'] = (function(_this) {
    return function(a) {
      return [-a];
    };
  })(this);
  cmd1['sign'] = (function(_this) {
    return function(a) {
      return [Math.sign(a)];
    };
  })(this);
  cmd1['abs'] = (function(_this) {
    return function(a) {
      return [abs(a)];
    };
  })(this);
  cmd1['sqrt'] = (function(_this) {
    return function(a) {
      return [sqrt(a)];
    };
  })(this);
  cmd1['rot'] = (function(_this) {
    return function(a) {
      return [a];
    };
  })(this);
  cmd1['~'] = (function(_this) {
    return function(a) {
      return [~a];
    };
  })(this);
  cmd1['biti'] = (function(_this) {
    return function(a) {
      return [a >> i & 1];
    };
  })(this);
  cmd1['bitj'] = (function(_this) {
    return function(a) {
      return [a >> j & 1];
    };
  })(this);
  cmd1['bitk'] = (function(_this) {
    return function(a) {
      return [a >> k & 1];
    };
  })(this);
  cmd1['bitij'] = (function(_this) {
    return function(a) {
      return [a >> i & 1, a >> j & 1];
    };
  })(this);
  cmd1['bitik'] = (function(_this) {
    return function(a) {
      return [a >> i & 1, a >> k & 1];
    };
  })(this);
  cmd1['bitjk'] = (function(_this) {
    return function(a) {
      return [a >> j & 1, a >> k & 1];
    };
  })(this);
  cmd1['bitijk'] = (function(_this) {
    return function(a) {
      return [a >> i & 1, a >> j & 1, a >> k & 1];
    };
  })(this);
  cmd2['swap'] = (function(_this) {
    return function(a, b) {
      return [a, b];
    };
  })(this);
  cmd2['<'] = (function(_this) {
    return function(a, b) {
      return [digit(b < a)];
    };
  })(this);
  cmd2['>'] = (function(_this) {
    return function(a, b) {
      return [digit(b > a)];
    };
  })(this);
  cmd2['=='] = (function(_this) {
    return function(a, b) {
      return [digit(b === a)];
    };
  })(this);
  cmd2['<='] = (function(_this) {
    return function(a, b) {
      return [digit(b <= a)];
    };
  })(this);
  cmd2['>='] = (function(_this) {
    return function(a, b) {
      return [digit(b >= a)];
    };
  })(this);
  cmd2['!='] = (function(_this) {
    return function(a, b) {
      return [digit(b !== a)];
    };
  })(this);
  cmd2['+'] = (function(_this) {
    return function(a, b) {
      return [b + a];
    };
  })(this);
  cmd2['-'] = (function(_this) {
    return function(a, b) {
      return [b - a];
    };
  })(this);
  cmd2['*'] = (function(_this) {
    return function(a, b) {
      return [b * a];
    };
  })(this);
  cmd2['**'] = (function(_this) {
    return function(a, b) {
      return [Math.pow(b, a)];
    };
  })(this);
  cmd2['/'] = (function(_this) {
    return function(a, b) {
      return [b / a];
    };
  })(this);
  cmd2['//'] = (function(_this) {
    return function(a, b) {
      return [Math.floor(b / a)];
    };
  })(this);
  cmd2['%'] = (function(_this) {
    return function(a, b) {
      return [b % a];
    };
  })(this);
  cmd2['%%'] = (function(_this) {
    return function(a, b) {
      return [modulo(b, a)];
    };
  })(this);
  cmd2['gcd'] = (function(_this) {
    return function(a, b) {
      return [gcd(a, b)];
    };
  })(this);
  cmd2['bit'] = (function(_this) {
    return function(a, b) {
      return [a >> b & 1];
    };
  })(this);
  cmd2['&'] = (function(_this) {
    return function(a, b) {
      return [b & a];
    };
  })(this);
  cmd2['|'] = (function(_this) {
    return function(a, b) {
      return [b | a];
    };
  })(this);
  cmd2['^'] = (function(_this) {
    return function(a, b) {
      return [b ^ a];
    };
  })(this);
  cmd2['>>'] = (function(_this) {
    return function(a, b) {
      return [b >> a];
    };
  })(this);
  cmd2['<<'] = (function(_this) {
    return function(a, b) {
      return [b << a];
    };
  })(this);
  cmd2['and'] = (function(_this) {
    return function(a, b) {
      return [digit(b !== 0 && a !== 0)];
    };
  })(this);
  cmd2['or'] = (function(_this) {
    return function(a, b) {
      return [digit(b !== 0 || a !== 0)];
    };
  })(this);
  cmd2['xor'] = (function(_this) {
    return function(a, b) {
      return [digit(b + a === 1)];
    };
  })(this);
  cmd3['rot'] = (function(_this) {
    return function(c, b, a) {
      return [b, c, a];
    };
  })(this);
  return cmd3['-rot'] = (function(_this) {
    return function(c, b, a) {
      return [c, a, b];
    };
  })(this);
};

setup = function() {
  var c, code, p1, p2, p3, sel0, sel15, sel16, sel17, sel18, sel19, sel3, sel5, sel6, sel7, sel8, tabell;
  c = createCanvas(500, 500, WEBGL);
  c.parent('canvas');
  buildCommands();
  code = $('#code');
  sel0 = $('#sel0');
  sel3 = $('#sel3');
  sel5 = $('#sel5');
  sel6 = $('#sel6');
  sel7 = $('#sel7');
  sel8 = $('#sel8');
  sel15 = $('#sel15');
  sel16 = $('#sel16');
  sel17 = $('#sel17');
  sel18 = $('#sel18');
  sel19 = $('#sel19');
  tabell = $('#tabell');
  p1 = $('#p1');
  p2 = $('#p2');
  p3 = $('#p3');
  fillSelect(sel0, range(1, 21));
  fillSelect(sel3, range(1, 21));
  fillSelect(sel5, '0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0'.split(' '));
  fillSelect(sel6, ['sphere', 'box']);
  fillSelect(sel7, ['yes', 'no']);
  fillSelect(sel8, '0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0'.split(' '));
  fillSelect(sel15, range(10));
  fillSelect(sel16, range(10));
  fillSelect(sel17, range(10));
  fillSelect(sel18, range(10));
  fillSelect(sel19, [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]);
  frameRate(10);
  sel0.val("12").change();
  sel3.val("10").change();
  sel5.val("1.0").change();
  sel6.val("sphere").change();
  sel7.val("yes").change();
  sel8.val("0.5").change();
  sel15.val("0").change();
  sel16.val("0").change();
  sel17.val("0").change();
  sel18.val("0").change();
  return trace();
};

digit = function(bool) {
  if (bool) {
    return 1;
  } else {
    return 0;
  }
};

showStack = function(level, cmd) {
  return tableAppend(tabell, level + cmd, stack.join(' '));
};

showError = function(e) {
  return tableAppend(tabell, e[0], e[1], '#FF0000');
};

gcd = function(x, y) {
  if (y === 0) {
    return x;
  } else {
    return gcd(y, x % y);
  }
};

evaluate = function(traceFlag, line, level) {
  var arr, cmd, l, len, nr, results;
  if (level == null) {
    level = '';
  }
  arr = line.split(' ');
  results = [];
  for (l = 0, len = arr.length; l < len; l++) {
    cmd = arr[l];
    if (cmd === '') {

    } else if (words[cmd] != null) {
      if (level.indexOf('.' + cmd + '.') !== -1) {
        throw [level + cmd, 'Recursion not allowed'];
      }
      results.push(evaluate(traceFlag, words[cmd], level + cmd + '.'));
    } else if (cmd3[cmd] != null) {
      if (stack.length < 3) {
        throw [level + cmd, 'Stack Underflow'];
      }
      stack = stack.concat(cmd3[cmd](stack.pop(), stack.pop(), stack.pop()));
      if (traceFlag) {
        results.push(showStack(level, cmd));
      } else {
        results.push(void 0);
      }
    } else if (cmd2[cmd] != null) {
      if (stack.length < 2) {
        throw [level + cmd, 'Stack Underflow'];
      }
      stack = stack.concat(cmd2[cmd](stack.pop(), stack.pop()));
      if (traceFlag) {
        results.push(showStack(level, cmd));
      } else {
        results.push(void 0);
      }
    } else if (cmd1[cmd] != null) {
      if (stack.length < 1) {
        throw [level + cmd, 'Stack Underflow'];
      }
      stack = stack.concat(cmd1[cmd](cmd === 'rot' ? stack.shift() : stack.pop()));
      if (traceFlag) {
        results.push(showStack(level, cmd));
      } else {
        results.push(void 0);
      }
    } else if (cmd0[cmd] != null) {
      stack = stack.concat(cmd0[cmd]());
      if (traceFlag) {
        results.push(showStack(level, cmd));
      } else {
        results.push(void 0);
      }
    } else {
      nr = parseFloat(cmd);
      if (_.isNumber(nr) && !_.isNaN(nr)) {
        stack.push(nr);
        if (traceFlag) {
          results.push(showStack(level, cmd));
        } else {
          results.push(void 0);
        }
      } else {
        throw [level + cmd, 'Unknown Word'];
      }
    }
  }
  return results;
};

calc = function(traceFlag) {
  var arr, cmd, defWords, e, l, len, state;
  if (traceFlag == null) {
    traceFlag = false;
  }
  words = {};
  stack = [];
  rstack = [];
  arr = code.value.replace(/\n/g, ' ').split(' ');
  state = 'normal';
  defWords = [];
  try {
    for (l = 0, len = arr.length; l < len; l++) {
      cmd = arr[l];
      if (cmd === '') {

      }
      if (cmd === ':') {
        state = 'defining';
      }
      if (state === 'defining') {
        defWords.push(cmd);
        if (cmd === ';') {
          if (defWords.length === 3) {
            delete words[defWords[0]];
          } else {
            words[defWords[1]] = defWords.slice(2, -1).join(' ');
          }
          state = 'normal';
        }
      } else {
        evaluate(traceFlag, cmd);
      }
    }
    return stack.length === 1 && 0 !== _.last(stack);
  } catch (error) {
    e = error;
    if (traceFlag) {
      return showError(e);
    }
  }
};

draw = function() {
  var alpha, arr, count, f, item, l, len, len1, len2, locX, locY, m, n, radius, ref, ref1, ref2;
  trace();
  bg(sel8.value);
  orbitControl();
  if ((0 < mouseX && mouseX < width) && (0 < mouseY && mouseY < height)) {
    locY = 1 - 2 * mouseY / height;
    locX = 2 * mouseX / width - 1;
  } else {
    locX = 1 - 2 * lightX / height;
    locY = 2 * lightY / width - 1;
  }
  alpha = sel5.value;
  ambientLight(128, 128, 128);
  pointLight(255, 255, 255, locX, locY, 0);
  t = frameCount;
  count = 0;
  radius = sel0.value;
  ref = range(N);
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    ref1 = range(N);
    for (m = 0, len1 = ref1.length; m < len1; m++) {
      j = ref1[m];
      ref2 = range(N);
      for (n = 0, len2 = ref2.length; n < len2; n++) {
        k = ref2[n];
        push();
        translate(SIZE * (0.5 + i - N / 2), SIZE * (0.5 + j - N / 2), SIZE * (0.5 + k - N / 2));
        f = 255 / (N - 1);
        specularMaterial(f * i, f * j, f * k, 255 * sel5.value);
        if (calc()) {
          if (sel6.value === 'sphere') {
            sphere(radius, radius, radius);
          } else {
            box(2 * radius, 2 * radius, 2 * radius);
          }
          count++;
        } else {
          if (sel7.value === 'yes') {
            sphere(2, 2, 2);
          }
        }
        pop();
      }
    }
  }
  arr = code.value.replace(/\n/g, ' ').split(' ');
  arr = (function() {
    var len3, o, results;
    results = [];
    for (o = 0, len3 = arr.length; o < len3; o++) {
      item = arr[o];
      if (item.length > 0) {
        results.push(item);
      }
    }
    return results;
  })();
  p1.innerHTML = 'Words: ' + arr.length;
  p2.innerHTML = 'Cubes: ' + count;
  if (millis() > timestamp) {
    p3.innerHTML = 'FPS: ' + int(frameRate());
    return timestamp = millis() + 1000;
  }
};

tableClear = function() {
  return $("#tabell tr").remove();
};

tableAppend = function(t, a, b, col) {
  var cell1, cell2, row;
  if (col == null) {
    col = '#C0C0C0';
  }
  row = t.insertRow(-1);
  cell1 = row.insertCell(-1);
  cell2 = row.insertCell(-1);
  cell1.innerHTML = a;
  cell2.innerHTML = b;
  cell1.style.backgroundColor = '#808080';
  cell2.style.backgroundColor = col;
  return cell2.style.textAlign = 'right';
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\github\p5Forth3D\coffee\sketch.coffee