// Generated by CoffeeScript 1.11.1
var N, SIZE, buildCommands, calc, commands, digit, draw, evaluate, fillSelect, i, j, k, lightX, lightY, mousePressed, pg, sel1click, sel2click, sel4click, sel5click, sel6click, sel7click, sel8click, setup, stack, t, tableAppend, tableClear, trace, words,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

N = 10;

SIZE = 250 / N;

pg = Array(N * N * N);

lightX = 0;

lightY = 0;

commands = {};

stack = [];

i = 0;

j = 0;

k = 0;

t = 0;

words = {};

fillSelect = function(sel, arr) {
  var key, l, len, results;
  sel.empty();
  results = [];
  for (l = 0, len = arr.length; l < len; l++) {
    key = arr[l];
    results.push(sel.append($("<option>").attr('value', key).text(key)));
  }
  return results;
};

sel1click = function(sel) {
  return print(sel.value);
};

sel2click = function(sel) {
  return print(sel.value);
};

sel4click = function(sel) {
  return print(sel.value);
};

sel5click = function(sel) {
  return trace();
};

sel6click = function(sel) {
  return trace();
};

sel7click = function(sel) {
  return trace();
};

sel8click = function(sel) {
  return trace();
};

trace = function(sel) {
  tableClear();
  tableAppend(tabell, 'command', 'stack');
  i = parseInt(sel5.value);
  j = parseInt(sel6.value);
  k = parseInt(sel7.value);
  t = parseInt(sel8.value);
  return calc(true);
};

buildCommands = (function(_this) {
  return function() {
    commands = {};
    commands['dup'] = function() {
      return stack.push(_.last(stack));
    };
    commands['swap'] = function() {
      var n, ref;
      n = stack.length - 1;
      return ref = [stack[n], stack[n - 1]], stack[n - 1] = ref[0], stack[n] = ref[1], ref;
    };
    commands['rot'] = function() {
      return stack.push(stack.shift());
    };
    commands['i'] = function() {
      return stack.push(i);
    };
    commands['j'] = function() {
      return stack.push(j);
    };
    commands['k'] = function() {
      return stack.push(k);
    };
    commands['t'] = function() {
      return stack.push(t);
    };
    commands['<'] = function() {
      return stack.push(digit(stack.pop() > stack.pop()));
    };
    commands['>'] = function() {
      return stack.push(digit(stack.pop() < stack.pop()));
    };
    commands['=='] = function() {
      return stack.push(digit(stack.pop() === stack.pop()));
    };
    commands['<='] = function() {
      return stack.push(digit(stack.pop() >= stack.pop()));
    };
    commands['>='] = function() {
      return stack.push(digit(stack.pop() <= stack.pop()));
    };
    commands['!='] = function() {
      return stack.push(digit(stack.pop() !== stack.pop()));
    };
    commands['+'] = function() {
      return stack.push(stack.pop() + stack.pop());
    };
    commands['-'] = function() {
      return stack.push(-stack.pop() + stack.pop());
    };
    commands['*'] = function() {
      return stack.push(stack.pop() * stack.pop());
    };
    commands['/'] = function() {
      var a;
      a = stack.pop();
      return stack.push(stack.pop() / a);
    };
    commands['//'] = function() {
      var a;
      a = stack.pop();
      return stack.push(Math.floor(stack.pop() / a));
    };
    commands['%'] = function() {
      var a;
      a = stack.pop();
      return stack.push(stack.pop() % a);
    };
    commands['%%'] = function() {
      var a;
      a = stack.pop();
      return stack.push(modulo(stack.pop(), a));
    };
    commands['bit'] = function() {
      return stack.push(stack.pop() >> stack.pop() & 1);
    };
    commands['biti'] = function() {
      return stack.push(stack.pop() >> i & 1);
    };
    commands['bitj'] = function() {
      return stack.push(stack.pop() >> j & 1);
    };
    commands['bitk'] = function() {
      return stack.push(stack.pop() >> k & 1);
    };
    commands['bitij'] = function() {
      var bits;
      bits = stack.pop();
      return stack = stack.concat([bits >> i & 1, bits >> j & 1]);
    };
    commands['bitik'] = function() {
      var bits;
      bits = stack.pop();
      return stack = stack.concat([bits >> i & 1, bits >> k & 1]);
    };
    commands['bitjk'] = function() {
      var bits;
      bits = stack.pop();
      return stack = stack.concat([bits >> j & 1, bits >> k & 1]);
    };
    commands['bitijk'] = function() {
      var bits;
      bits = stack.pop();
      return stack = stack.concat([bits >> i & 1, bits >> j & 1, bits >> k & 1]);
    };
    commands['&'] = function() {
      return stack.push(stack.pop() & stack.pop());
    };
    commands['|'] = function() {
      return stack.push(stack.pop() | stack.pop());
    };
    commands['^'] = function() {
      return stack.push(stack.pop() ^ stack.pop());
    };
    commands['~'] = function() {
      return stack.push(~stack.pop());
    };
    commands['and'] = function() {
      var a, b, ref;
      ref = [stack.pop(), stack.pop()], a = ref[0], b = ref[1];
      return stack.push(digit(a !== 0 && b !== 0));
    };
    commands['or'] = function() {
      var a, b, ref;
      ref = [stack.pop(), stack.pop()], a = ref[0], b = ref[1];
      return stack.push(digit(a !== 0 || b !== 0));
    };
    commands['xor'] = function() {
      var a, b;
      a = digit(stack.pop() !== 0);
      b = digit(stack.pop() !== 0);
      return stack.push(digit(a + b === 1));
    };
    commands['not'] = function() {
      return stack.push(digit(stack.pop() === 0));
    };
    commands['abs'] = function() {
      return stack.push(abs(stack.pop()));
    };
    return commands['sqrt'] = function() {
      return stack.push(sqrt(stack.pop()));
    };
  };
})(this);

setup = function() {
  var c, code, f, index, l, len, ref, results, sel1, sel2, sel4, sel5, sel6, sel7, sel8, tabell;
  c = createCanvas(500, 500, WEBGL);
  c.parent('canvas');
  buildCommands();
  code = $('#code');
  sel1 = $('#sel1');
  sel2 = $('#sel2');
  sel4 = $('#sel4');
  sel5 = $('#sel5');
  sel6 = $('#sel6');
  sel7 = $('#sel7');
  sel8 = $('#sel8');
  tabell = $('#tabell');
  fillSelect(sel1, ['free'].concat(range(0, 360, 15)));
  fillSelect(sel2, ['free'].concat(range(0, 360, 15)));
  fillSelect(sel4, range(25));
  fillSelect(sel5, range(10));
  fillSelect(sel6, range(10));
  fillSelect(sel7, range(10));
  fillSelect(sel8, range(10));
  sel1.val("free").change();
  sel2.val("free").change();
  sel4.val("0").change();
  sel5.val("0").change();
  sel6.val("0").change();
  sel7.val("0").change();
  sel8.val("0").change();
  trace();
  f = 255 / (N - 1);
  ref = range(N);
  results = [];
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    results.push((function() {
      var len1, m, ref1, results1;
      ref1 = range(N);
      results1 = [];
      for (m = 0, len1 = ref1.length; m < len1; m++) {
        j = ref1[m];
        results1.push((function() {
          var len2, o, ref2, results2;
          ref2 = range(N);
          results2 = [];
          for (o = 0, len2 = ref2.length; o < len2; o++) {
            k = ref2[o];
            index = N * N * k + N * j + i;
            pg[index] = createGraphics(1, 1);
            results2.push(pg[index].background(f * i, f * j, f * k));
          }
          return results2;
        })());
      }
      return results1;
    })());
  }
  return results;
};

digit = function(bool) {
  if (bool) {
    return 1;
  } else {
    return 0;
  }
};

evaluate = function(trace, line, level) {
  var arr, cmd, l, len, results;
  if (level == null) {
    level = '';
  }
  arr = line.split(' ');
  results = [];
  for (l = 0, len = arr.length; l < len; l++) {
    cmd = arr[l];
    if (cmd === '') {

    } else if (commands[cmd] != null) {
      commands[cmd]();
      if (trace) {
        results.push(tableAppend(tabell, level + cmd, '[' + stack.join(',') + ']'));
      } else {
        results.push(void 0);
      }
    } else if (words[cmd] != null) {
      results.push(evaluate(true, words[cmd], level + cmd + '.'));
    } else {
      stack.push(parseFloat(cmd));
      if (trace) {
        results.push(tableAppend(tabell, level + cmd, '[' + stack.join(',') + ']'));
      } else {
        results.push(void 0);
      }
    }
  }
  return results;
};

calc = function(trace) {
  var arr, l, len, line, lines;
  if (trace == null) {
    trace = false;
  }
  stack = [];
  lines = code.value.split("\n");
  for (l = 0, len = lines.length; l < len; l++) {
    line = lines[l];
    if (line.indexOf(':') === 0) {
      arr = line.split(' ');
      words[arr[1]] = arr.slice(2, -1).join(' ');
    } else {
      evaluate(trace, line);
    }
  }
  return 0 !== _.last(stack);
};

mousePressed = function() {
  if ((0 < mouseX && mouseX < width)) {
    lightX = mouseX;
  }
  if ((0 < mouseY && mouseY < height)) {
    return lightY = mouseY;
  }
};

draw = function() {
  var index, l, len, locX, locY, ref, results;
  if (sel4.value === '0') {
    return;
  }
  bg(0.5);
  if ((0 < mouseX && mouseX < width) && (0 < mouseY && mouseY < height)) {
    locY = (0.5 - mouseY / height) * 2;
    locX = (mouseX / width - 0.5) * 2;
  } else {
    locY = (0.5 - lightY / height) * 2;
    locX = (lightX / width - 0.5) * 2;
  }
  pointLight(255, 255, 255, locX, locY, 0);
  if (sel1.value === 'free') {
    rotateY(sel4.value * frameCount / 250);
  } else {
    rotateY(radians(sel1.value));
  }
  if (sel2.value === 'free') {
    rotateX(sel4.value * frameCount / 500);
  } else {
    rotateX(radians(sel2.value));
  }
  t = frameCount;
  ref = range(N);
  results = [];
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    results.push((function() {
      var len1, m, ref1, results1;
      ref1 = range(N);
      results1 = [];
      for (m = 0, len1 = ref1.length; m < len1; m++) {
        j = ref1[m];
        results1.push((function() {
          var len2, o, ref2, results2;
          ref2 = range(N);
          results2 = [];
          for (o = 0, len2 = ref2.length; o < len2; o++) {
            k = ref2[o];
            push();
            translate(SIZE * (0.5 + i - N / 2), SIZE * (0.5 + j - N / 2), SIZE * (0.5 + k - N / 2));
            if (calc()) {
              index = N * N * k + N * j + i;
              texture(pg[index]);
              box(SIZE, SIZE, SIZE);
            } else {
              texture(pg[N * N * N - 1]);
              box(2, 2, 2);
            }
            results2.push(pop());
          }
          return results2;
        })());
      }
      return results1;
    })());
  }
  return results;
};

tableClear = function() {
  return $("#tabell tr").remove();
};

tableAppend = function(t, a, b) {
  var cell1, cell2, row;
  row = t.insertRow(-1);
  cell1 = row.insertCell(-1);
  cell2 = row.insertCell(-1);
  cell1.innerHTML = a;
  return cell2.innerHTML = b;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHNrZXRjaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEseVBBQUE7RUFBQTs7QUFBQSxDQUFBLEdBQUk7O0FBQ0osSUFBQSxHQUFPLEdBQUEsR0FBSTs7QUFFWCxFQUFBLEdBQUssS0FBQSxDQUFNLENBQUEsR0FBRSxDQUFGLEdBQUksQ0FBVjs7QUFDTCxNQUFBLEdBQVM7O0FBQ1QsTUFBQSxHQUFTOztBQUNULFFBQUEsR0FBVzs7QUFDWCxLQUFBLEdBQVE7O0FBQ1IsQ0FBQSxHQUFJOztBQUNKLENBQUEsR0FBSTs7QUFDSixDQUFBLEdBQUk7O0FBQ0osQ0FBQSxHQUFJOztBQUVKLEtBQUEsR0FBUTs7QUFFUixVQUFBLEdBQWEsU0FBQyxHQUFELEVBQU0sR0FBTjtBQUNaLE1BQUE7RUFBQSxHQUFHLENBQUMsS0FBSixDQUFBO0FBQ0E7T0FBQSxxQ0FBQTs7aUJBQ0MsR0FBRyxDQUFDLE1BQUosQ0FBVyxDQUFBLENBQUUsVUFBRixDQUFhLENBQUMsSUFBZCxDQUFtQixPQUFuQixFQUE0QixHQUE1QixDQUFnQyxDQUFDLElBQWpDLENBQXNDLEdBQXRDLENBQVg7QUFERDs7QUFGWTs7QUFLYixTQUFBLEdBQVksU0FBQyxHQUFEO1NBQVMsS0FBQSxDQUFNLEdBQUcsQ0FBQyxLQUFWO0FBQVQ7O0FBQ1osU0FBQSxHQUFZLFNBQUMsR0FBRDtTQUFTLEtBQUEsQ0FBTSxHQUFHLENBQUMsS0FBVjtBQUFUOztBQUNaLFNBQUEsR0FBWSxTQUFDLEdBQUQ7U0FBUyxLQUFBLENBQU0sR0FBRyxDQUFDLEtBQVY7QUFBVDs7QUFFWixTQUFBLEdBQVksU0FBQyxHQUFEO1NBQVMsS0FBQSxDQUFBO0FBQVQ7O0FBQ1osU0FBQSxHQUFZLFNBQUMsR0FBRDtTQUFTLEtBQUEsQ0FBQTtBQUFUOztBQUNaLFNBQUEsR0FBWSxTQUFDLEdBQUQ7U0FBUyxLQUFBLENBQUE7QUFBVDs7QUFDWixTQUFBLEdBQVksU0FBQyxHQUFEO1NBQVMsS0FBQSxDQUFBO0FBQVQ7O0FBRVosS0FBQSxHQUFRLFNBQUMsR0FBRDtFQUNQLFVBQUEsQ0FBQTtFQUNBLFdBQUEsQ0FBWSxNQUFaLEVBQW9CLFNBQXBCLEVBQStCLE9BQS9CO0VBQ0EsQ0FBQSxHQUFJLFFBQUEsQ0FBUyxJQUFJLENBQUMsS0FBZDtFQUNKLENBQUEsR0FBSSxRQUFBLENBQVMsSUFBSSxDQUFDLEtBQWQ7RUFDSixDQUFBLEdBQUksUUFBQSxDQUFTLElBQUksQ0FBQyxLQUFkO0VBQ0osQ0FBQSxHQUFJLFFBQUEsQ0FBUyxJQUFJLENBQUMsS0FBZDtTQUNKLElBQUEsQ0FBSyxJQUFMO0FBUE87O0FBU1IsYUFBQSxHQUFnQixDQUFBLFNBQUEsS0FBQTtTQUFBLFNBQUE7SUFDZixRQUFBLEdBQVc7SUFDWCxRQUFTLENBQUEsS0FBQSxDQUFULEdBQWtCLFNBQUE7YUFBTSxLQUFLLENBQUMsSUFBTixDQUFXLENBQUMsQ0FBQyxJQUFGLENBQU8sS0FBUCxDQUFYO0lBQU47SUFDbEIsUUFBUyxDQUFBLE1BQUEsQ0FBVCxHQUFtQixTQUFBO0FBQ2xCLFVBQUE7TUFBQSxDQUFBLEdBQUksS0FBSyxDQUFDLE1BQU4sR0FBZTthQUNuQixNQUF3QixDQUFDLEtBQU0sQ0FBQSxDQUFBLENBQVAsRUFBVSxLQUFNLENBQUEsQ0FBQSxHQUFFLENBQUYsQ0FBaEIsQ0FBeEIsRUFBQyxLQUFNLENBQUEsQ0FBQSxHQUFFLENBQUYsVUFBUCxFQUFZLEtBQU0sQ0FBQSxDQUFBLFVBQWxCLEVBQUE7SUFGa0I7SUFHbkIsUUFBUyxDQUFBLEtBQUEsQ0FBVCxHQUFrQixTQUFBO2FBQU0sS0FBSyxDQUFDLElBQU4sQ0FBVyxLQUFLLENBQUMsS0FBTixDQUFBLENBQVg7SUFBTjtJQUNsQixRQUFTLENBQUEsR0FBQSxDQUFULEdBQWdCLFNBQUE7YUFBTSxLQUFLLENBQUMsSUFBTixDQUFXLENBQVg7SUFBTjtJQUNoQixRQUFTLENBQUEsR0FBQSxDQUFULEdBQWdCLFNBQUE7YUFBTSxLQUFLLENBQUMsSUFBTixDQUFXLENBQVg7SUFBTjtJQUNoQixRQUFTLENBQUEsR0FBQSxDQUFULEdBQWdCLFNBQUE7YUFBTSxLQUFLLENBQUMsSUFBTixDQUFXLENBQVg7SUFBTjtJQUNoQixRQUFTLENBQUEsR0FBQSxDQUFULEdBQWdCLFNBQUE7YUFBTSxLQUFLLENBQUMsSUFBTixDQUFXLENBQVg7SUFBTjtJQUNoQixRQUFTLENBQUEsR0FBQSxDQUFULEdBQWdCLFNBQUE7YUFBTSxLQUFLLENBQUMsSUFBTixDQUFXLEtBQUEsQ0FBTSxLQUFLLENBQUMsR0FBTixDQUFBLENBQUEsR0FBYyxLQUFLLENBQUMsR0FBTixDQUFBLENBQXBCLENBQVg7SUFBTjtJQUNoQixRQUFTLENBQUEsR0FBQSxDQUFULEdBQWdCLFNBQUE7YUFBTSxLQUFLLENBQUMsSUFBTixDQUFXLEtBQUEsQ0FBTSxLQUFLLENBQUMsR0FBTixDQUFBLENBQUEsR0FBYyxLQUFLLENBQUMsR0FBTixDQUFBLENBQXBCLENBQVg7SUFBTjtJQUNoQixRQUFTLENBQUEsSUFBQSxDQUFULEdBQWlCLFNBQUE7YUFBTSxLQUFLLENBQUMsSUFBTixDQUFXLEtBQUEsQ0FBTSxLQUFLLENBQUMsR0FBTixDQUFBLENBQUEsS0FBZSxLQUFLLENBQUMsR0FBTixDQUFBLENBQXJCLENBQVg7SUFBTjtJQUNqQixRQUFTLENBQUEsSUFBQSxDQUFULEdBQWlCLFNBQUE7YUFBTSxLQUFLLENBQUMsSUFBTixDQUFXLEtBQUEsQ0FBTSxLQUFLLENBQUMsR0FBTixDQUFBLENBQUEsSUFBZSxLQUFLLENBQUMsR0FBTixDQUFBLENBQXJCLENBQVg7SUFBTjtJQUNqQixRQUFTLENBQUEsSUFBQSxDQUFULEdBQWlCLFNBQUE7YUFBTSxLQUFLLENBQUMsSUFBTixDQUFXLEtBQUEsQ0FBTSxLQUFLLENBQUMsR0FBTixDQUFBLENBQUEsSUFBZSxLQUFLLENBQUMsR0FBTixDQUFBLENBQXJCLENBQVg7SUFBTjtJQUNqQixRQUFTLENBQUEsSUFBQSxDQUFU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LEVBQUcsQ0FBQSxDQUFBLEdBQUUsQ0FBRixHQUFJLENBQUosR0FBTSxDQUFOLENBQVg7Y0FDQSxHQUFBLENBQUksQ0FBSixFQUFNLENBQU4sRUFBUSxDQUFSLEVBTkQ7OzBCQU9BLEdBQUEsQ0FBQTtBQVZEOzs7QUFERDs7O0FBREQ7O0FBdEJNOztBQW9DUCxVQUFBLEdBQWEsU0FBQTtTQUFHLENBQUEsQ0FBRSxZQUFGLENBQWUsQ0FBQyxNQUFoQixDQUFBO0FBQUg7O0FBRWIsV0FBQSxHQUFjLFNBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQO0FBQ2IsTUFBQTtFQUFBLEdBQUEsR0FBTSxDQUFDLENBQUMsU0FBRixDQUFZLENBQUMsQ0FBYjtFQUNOLEtBQUEsR0FBUSxHQUFHLENBQUMsVUFBSixDQUFlLENBQUMsQ0FBaEI7RUFDUixLQUFBLEdBQVEsR0FBRyxDQUFDLFVBQUosQ0FBZSxDQUFDLENBQWhCO0VBQ1IsS0FBSyxDQUFDLFNBQU4sR0FBa0I7U0FDbEIsS0FBSyxDQUFDLFNBQU4sR0FBa0I7QUFMTCIsInNvdXJjZXNDb250ZW50IjpbIk4gPSAxMFxyXG5TSVpFID0gMjUwL05cclxuXHJcbnBnID0gQXJyYXkgTipOKk5cclxubGlnaHRYID0gMFxyXG5saWdodFkgPSAwXHJcbmNvbW1hbmRzID0ge31cclxuc3RhY2sgPSBbXVxyXG5pID0gMFxyXG5qID0gMFxyXG5rID0gMFxyXG50ID0gMFxyXG5cclxud29yZHMgPSB7fVxyXG5cclxuZmlsbFNlbGVjdCA9IChzZWwsIGFycikgLT5cclxuXHRzZWwuZW1wdHkoKVxyXG5cdGZvciBrZXkgaW4gYXJyXHJcblx0XHRzZWwuYXBwZW5kKCQoXCI8b3B0aW9uPlwiKS5hdHRyKCd2YWx1ZScsIGtleSkudGV4dChrZXkpKVxyXG5cclxuc2VsMWNsaWNrID0gKHNlbCkgLT4gcHJpbnQgc2VsLnZhbHVlXHJcbnNlbDJjbGljayA9IChzZWwpIC0+IHByaW50IHNlbC52YWx1ZVxyXG5zZWw0Y2xpY2sgPSAoc2VsKSAtPiBwcmludCBzZWwudmFsdWVcclxuXHJcbnNlbDVjbGljayA9IChzZWwpIC0+IHRyYWNlKClcclxuc2VsNmNsaWNrID0gKHNlbCkgLT4gdHJhY2UoKVxyXG5zZWw3Y2xpY2sgPSAoc2VsKSAtPiB0cmFjZSgpXHJcbnNlbDhjbGljayA9IChzZWwpIC0+IHRyYWNlKClcclxuXHJcbnRyYWNlID0gKHNlbCkgLT5cclxuXHR0YWJsZUNsZWFyKClcclxuXHR0YWJsZUFwcGVuZCB0YWJlbGwsICdjb21tYW5kJywgJ3N0YWNrJ1xyXG5cdGkgPSBwYXJzZUludChzZWw1LnZhbHVlKVxyXG5cdGogPSBwYXJzZUludChzZWw2LnZhbHVlKVxyXG5cdGsgPSBwYXJzZUludChzZWw3LnZhbHVlKVxyXG5cdHQgPSBwYXJzZUludChzZWw4LnZhbHVlKVxyXG5cdGNhbGMgdHJ1ZVxyXG5cclxuYnVpbGRDb21tYW5kcyA9ID0+XHJcblx0Y29tbWFuZHMgPSB7fVxyXG5cdGNvbW1hbmRzWydkdXAnXSA9ICgpID0+IHN0YWNrLnB1c2ggXy5sYXN0IHN0YWNrXHJcblx0Y29tbWFuZHNbJ3N3YXAnXSA9ICgpID0+XHJcblx0XHRuID0gc3RhY2subGVuZ3RoIC0gMVxyXG5cdFx0W3N0YWNrW24tMV0sc3RhY2tbbl1dID0gW3N0YWNrW25dLHN0YWNrW24tMV1dXHJcblx0Y29tbWFuZHNbJ3JvdCddID0gKCkgPT4gc3RhY2sucHVzaCBzdGFjay5zaGlmdCgpXHJcblx0Y29tbWFuZHNbJ2knXSA9ICgpID0+IHN0YWNrLnB1c2ggaVxyXG5cdGNvbW1hbmRzWydqJ10gPSAoKSA9PiBzdGFjay5wdXNoIGpcclxuXHRjb21tYW5kc1snayddID0gKCkgPT4gc3RhY2sucHVzaCBrXHJcblx0Y29tbWFuZHNbJ3QnXSA9ICgpID0+IHN0YWNrLnB1c2ggdFxyXG5cdGNvbW1hbmRzWyc8J10gPSAoKSA9PiBzdGFjay5wdXNoIGRpZ2l0IHN0YWNrLnBvcCgpID4gc3RhY2sucG9wKClcclxuXHRjb21tYW5kc1snPiddID0gKCkgPT4gc3RhY2sucHVzaCBkaWdpdCBzdGFjay5wb3AoKSA8IHN0YWNrLnBvcCgpXHJcblx0Y29tbWFuZHNbJz09J10gPSAoKSA9PiBzdGFjay5wdXNoIGRpZ2l0IHN0YWNrLnBvcCgpID09IHN0YWNrLnBvcCgpXHJcblx0Y29tbWFuZHNbJzw9J10gPSAoKSA9PiBzdGFjay5wdXNoIGRpZ2l0IHN0YWNrLnBvcCgpID49IHN0YWNrLnBvcCgpXHJcblx0Y29tbWFuZHNbJz49J10gPSAoKSA9PiBzdGFjay5wdXNoIGRpZ2l0IHN0YWNrLnBvcCgpIDw9IHN0YWNrLnBvcCgpXHJcblx0Y29tbWFuZHNbJyE9J10gPSAoKSA9PiBzdGFjay5wdXNoIGRpZ2l0IHN0YWNrLnBvcCgpICE9IHN0YWNrLnBvcCgpXHJcblx0Y29tbWFuZHNbJysnXSA9ICgpID0+IHN0YWNrLnB1c2ggc3RhY2sucG9wKCkgKyBzdGFjay5wb3AoKVxyXG5cdGNvbW1hbmRzWyctJ10gPSAoKSA9PiBzdGFjay5wdXNoIC1zdGFjay5wb3AoKSArIHN0YWNrLnBvcCgpXHJcblx0Y29tbWFuZHNbJyonXSA9ICgpID0+IHN0YWNrLnB1c2ggc3RhY2sucG9wKCkgKiBzdGFjay5wb3AoKVxyXG5cdGNvbW1hbmRzWycvJ10gPSAoKSA9PlxyXG5cdFx0YSA9IHN0YWNrLnBvcCgpXHJcblx0XHRzdGFjay5wdXNoIHN0YWNrLnBvcCgpIC8gYVxyXG5cdGNvbW1hbmRzWycvLyddID0gKCkgPT5cclxuXHRcdGEgPSBzdGFjay5wb3AoKVxyXG5cdFx0c3RhY2sucHVzaCBzdGFjay5wb3AoKSAvLyBhXHJcblx0Y29tbWFuZHNbJyUnXSA9ICgpID0+XHJcblx0XHRhID0gc3RhY2sucG9wKClcclxuXHRcdHN0YWNrLnB1c2ggc3RhY2sucG9wKCkgJSBhXHJcblx0Y29tbWFuZHNbJyUlJ10gPSAoKSA9PlxyXG5cdFx0YSA9IHN0YWNrLnBvcCgpXHJcblx0XHRzdGFjay5wdXNoIHN0YWNrLnBvcCgpICUlIGFcclxuXHRjb21tYW5kc1snYml0J10gPSAoKSA9PiBzdGFjay5wdXNoIHN0YWNrLnBvcCgpID4+IHN0YWNrLnBvcCgpICYgMVxyXG5cdGNvbW1hbmRzWydiaXRpJ10gPSAoKSA9PiBzdGFjay5wdXNoIHN0YWNrLnBvcCgpID4+IGkgJiAxXHJcblx0Y29tbWFuZHNbJ2JpdGonXSA9ICgpID0+IHN0YWNrLnB1c2ggc3RhY2sucG9wKCkgPj4gaiAmIDFcclxuXHRjb21tYW5kc1snYml0ayddID0gKCkgPT4gc3RhY2sucHVzaCBzdGFjay5wb3AoKSA+PiBrICYgMVxyXG5cdGNvbW1hbmRzWydiaXRpaiddID0gKCkgPT5cclxuXHRcdGJpdHMgPSBzdGFjay5wb3AoKVxyXG5cdFx0c3RhY2sgPSBzdGFjay5jb25jYXQgW2JpdHMgPj4gaSAmIDEsIGJpdHMgPj4gaiAmIDFdXHJcblx0Y29tbWFuZHNbJ2JpdGlrJ10gPSAoKSA9PlxyXG5cdFx0Yml0cyA9IHN0YWNrLnBvcCgpXHJcblx0XHRzdGFjayA9IHN0YWNrLmNvbmNhdCBbYml0cyA+PiBpICYgMSwgYml0cyA+PiBrICYgMV1cclxuXHRjb21tYW5kc1snYml0amsnXSA9ICgpID0+XHJcblx0XHRiaXRzID0gc3RhY2sucG9wKClcclxuXHRcdHN0YWNrID0gc3RhY2suY29uY2F0IFtiaXRzID4+IGogJiAxLCBiaXRzID4+IGsgJiAxXVxyXG5cdGNvbW1hbmRzWydiaXRpamsnXSA9ICgpID0+XHJcblx0XHRiaXRzID0gc3RhY2sucG9wKClcclxuXHRcdHN0YWNrID0gc3RhY2suY29uY2F0IFtiaXRzID4+IGkgJiAxLCBiaXRzID4+IGogJiAxLCBiaXRzID4+IGsgJiAxXVxyXG5cdGNvbW1hbmRzWycmJ10gPSAoKSA9PiBzdGFjay5wdXNoIHN0YWNrLnBvcCgpICYgc3RhY2sucG9wKClcclxuXHRjb21tYW5kc1snfCddID0gKCkgPT4gc3RhY2sucHVzaCBzdGFjay5wb3AoKSB8IHN0YWNrLnBvcCgpXHJcblx0Y29tbWFuZHNbJ14nXSA9ICgpID0+IHN0YWNrLnB1c2ggc3RhY2sucG9wKCkgXiBzdGFjay5wb3AoKVxyXG5cdGNvbW1hbmRzWyd+J10gPSAoKSA9PiBzdGFjay5wdXNoIH5zdGFjay5wb3AoKVxyXG5cdGNvbW1hbmRzWydhbmQnXSA9ICgpID0+XHJcblx0XHRbYSxiXSA9IFtzdGFjay5wb3AoKSxzdGFjay5wb3AoKV1cclxuXHRcdHN0YWNrLnB1c2ggZGlnaXQgYSE9MCBhbmQgYiE9MFxyXG5cdGNvbW1hbmRzWydvciddID0gKCkgPT5cclxuXHRcdFthLGJdID0gW3N0YWNrLnBvcCgpLHN0YWNrLnBvcCgpXVxyXG5cdFx0c3RhY2sucHVzaCBkaWdpdCBhIT0wIG9yIGIhPTBcclxuXHRjb21tYW5kc1sneG9yJ10gPSAoKSA9PlxyXG5cdFx0YSA9IGRpZ2l0IHN0YWNrLnBvcCgpICE9IDBcclxuXHRcdGIgPSBkaWdpdCBzdGFjay5wb3AoKSAhPSAwXHJcblx0XHRzdGFjay5wdXNoIGRpZ2l0IGErYiA9PSAxXHJcblx0Y29tbWFuZHNbJ25vdCddID0gKCkgPT4gc3RhY2sucHVzaCBkaWdpdCBzdGFjay5wb3AoKSA9PSAwXHJcblx0Y29tbWFuZHNbJ2FicyddID0gKCkgPT4gc3RhY2sucHVzaCBhYnMgc3RhY2sucG9wKClcclxuXHRjb21tYW5kc1snc3FydCddID0gKCkgPT4gc3RhY2sucHVzaCBzcXJ0IHN0YWNrLnBvcCgpXHJcblxyXG5zZXR1cCA9IC0+XHJcblx0YyA9IGNyZWF0ZUNhbnZhcyA1MDAsNTAwLFdFQkdMXHJcblx0Yy5wYXJlbnQgJ2NhbnZhcydcclxuXHJcblx0YnVpbGRDb21tYW5kcygpXHJcblxyXG5cdGNvZGUgPSAkKCcjY29kZScpXHJcblxyXG5cdHNlbDEgPSAkKCcjc2VsMScpXHJcblx0c2VsMiA9ICQoJyNzZWwyJylcclxuXHRzZWw0ID0gJCgnI3NlbDQnKVxyXG5cdHNlbDUgPSAkKCcjc2VsNScpXHJcblx0c2VsNiA9ICQoJyNzZWw2JylcclxuXHRzZWw3ID0gJCgnI3NlbDcnKVxyXG5cdHNlbDggPSAkKCcjc2VsOCcpXHJcblxyXG5cdHRhYmVsbCA9ICQoJyN0YWJlbGwnKVxyXG5cclxuXHRmaWxsU2VsZWN0IHNlbDEsIFsnZnJlZSddLmNvbmNhdCByYW5nZSAwLCAzNjAsIDE1ICMgeFxyXG5cdGZpbGxTZWxlY3Qgc2VsMiwgWydmcmVlJ10uY29uY2F0IHJhbmdlIDAsIDM2MCwgMTUgIyB5XHJcblxyXG5cdGZpbGxTZWxlY3Qgc2VsNCwgcmFuZ2UgMjUgIyBzcGVlZFxyXG5cdGZpbGxTZWxlY3Qgc2VsNSwgcmFuZ2UgMTAgI1xyXG5cdGZpbGxTZWxlY3Qgc2VsNiwgcmFuZ2UgMTAgIyBpXHJcblx0ZmlsbFNlbGVjdCBzZWw3LCByYW5nZSAxMCAjIGpcclxuXHRmaWxsU2VsZWN0IHNlbDgsIHJhbmdlIDEwICMga1xyXG5cclxuXHRzZWwxLnZhbChcImZyZWVcIikuY2hhbmdlKClcclxuXHRzZWwyLnZhbChcImZyZWVcIikuY2hhbmdlKClcclxuXHRzZWw0LnZhbChcIjBcIikuY2hhbmdlKClcclxuXHJcblx0c2VsNS52YWwoXCIwXCIpLmNoYW5nZSgpXHJcblx0c2VsNi52YWwoXCIwXCIpLmNoYW5nZSgpXHJcblx0c2VsNy52YWwoXCIwXCIpLmNoYW5nZSgpXHJcblx0c2VsOC52YWwoXCIwXCIpLmNoYW5nZSgpXHJcblxyXG5cdHRyYWNlKClcclxuXHJcblx0ZiA9IDI1NS8oTi0xKVxyXG5cdGZvciBpIGluIHJhbmdlIE5cclxuXHRcdGZvciBqIGluIHJhbmdlIE5cclxuXHRcdFx0Zm9yIGsgaW4gcmFuZ2UgTlxyXG5cdFx0XHRcdGluZGV4ID0gTipOKmsrTipqK2lcclxuXHRcdFx0XHRwZ1tpbmRleF0gPSBjcmVhdGVHcmFwaGljcyAxLCAxXHJcblx0XHRcdFx0cGdbaW5kZXhdLmJhY2tncm91bmQgZippLCBmKmosIGYqa1xyXG5cclxuZGlnaXQgPSAoYm9vbCkgLT4gaWYgYm9vbCB0aGVuIDEgZWxzZSAwXHJcblxyXG5ldmFsdWF0ZSA9ICh0cmFjZSwgbGluZSwgbGV2ZWw9JycpIC0+XHJcblx0YXJyID0gbGluZS5zcGxpdCAnICdcclxuXHRmb3IgY21kIGluIGFyclxyXG5cdFx0aWYgY21kPT0nJ1xyXG5cdFx0ZWxzZSBpZiBjb21tYW5kc1tjbWRdP1xyXG5cdFx0XHRjb21tYW5kc1tjbWRdKClcclxuXHRcdFx0aWYgdHJhY2UgdGhlbiB0YWJsZUFwcGVuZCB0YWJlbGwsIGxldmVsICsgY21kLCAnWycgKyBzdGFjay5qb2luKCcsJykgKyAnXSdcclxuXHRcdGVsc2UgaWYgd29yZHNbY21kXT9cclxuXHRcdFx0ZXZhbHVhdGUgdHJ1ZSwgd29yZHNbY21kXSxsZXZlbCArIGNtZCArICcuJ1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHRzdGFjay5wdXNoIHBhcnNlRmxvYXQgY21kXHJcblx0XHRcdGlmIHRyYWNlIHRoZW4gdGFibGVBcHBlbmQgdGFiZWxsLCBsZXZlbCArIGNtZCwgJ1snICsgc3RhY2suam9pbignLCcpICsgJ10nXHJcblxyXG5jYWxjID0gKHRyYWNlPWZhbHNlKSAtPlxyXG5cdHN0YWNrID0gW11cclxuXHRsaW5lcyA9IGNvZGUudmFsdWUuc3BsaXQgXCJcXG5cIlxyXG5cdGZvciBsaW5lIGluIGxpbmVzXHJcblx0XHRpZiBsaW5lLmluZGV4T2YoJzonKT09MFxyXG5cdFx0XHRhcnIgPSBsaW5lLnNwbGl0ICcgJ1xyXG5cdFx0XHR3b3Jkc1thcnJbMV1dID0gYXJyWzIuLi0yXS5qb2luKCcgJylcclxuXHRcdGVsc2VcclxuXHRcdFx0ZXZhbHVhdGUgdHJhY2UsbGluZVxyXG5cdDAgIT0gXy5sYXN0IHN0YWNrXHJcblxyXG5tb3VzZVByZXNzZWQgPSAtPlxyXG5cdGlmIDA8bW91c2VYPHdpZHRoIHRoZW4gbGlnaHRYID0gbW91c2VYXHJcblx0aWYgMDxtb3VzZVk8aGVpZ2h0IHRoZW4gbGlnaHRZID0gbW91c2VZXHJcblxyXG5kcmF3ID0gLT5cclxuXHRpZiBzZWw0LnZhbHVlID09ICcwJyB0aGVuIHJldHVyblxyXG5cdGJnIDAuNVxyXG5cclxuXHRpZiAwIDwgbW91c2VYIDwgd2lkdGggYW5kIDAgPCBtb3VzZVkgPCBoZWlnaHRcclxuXHRcdGxvY1kgPSAoMC41IC0gbW91c2VZIC8gaGVpZ2h0KSAqIDJcclxuXHRcdGxvY1ggPSAobW91c2VYIC8gd2lkdGggIC0gMC41KSAqIDJcclxuXHRlbHNlXHJcblx0XHRsb2NZID0gKDAuNSAtIGxpZ2h0WSAvIGhlaWdodCkgKiAyXHJcblx0XHRsb2NYID0gKGxpZ2h0WCAvIHdpZHRoICAtIDAuNSkgKiAyXHJcblx0cG9pbnRMaWdodCAyNTUsIDI1NSwgMjU1LCBsb2NYLGxvY1ksMFxyXG5cclxuXHRpZiBzZWwxLnZhbHVlID09ICdmcmVlJ1xyXG5cdFx0cm90YXRlWSBzZWw0LnZhbHVlICogZnJhbWVDb3VudC8yNTBcclxuXHRlbHNlXHJcblx0XHRyb3RhdGVZIHJhZGlhbnMgc2VsMS52YWx1ZVxyXG5cclxuXHRpZiBzZWwyLnZhbHVlID09ICdmcmVlJ1xyXG5cdFx0cm90YXRlWCBzZWw0LnZhbHVlICogZnJhbWVDb3VudC81MDBcclxuXHRlbHNlXHJcblx0XHRyb3RhdGVYIHJhZGlhbnMgc2VsMi52YWx1ZVxyXG5cdHQgPSBmcmFtZUNvdW50XHJcblx0Zm9yIGkgaW4gcmFuZ2UgTlxyXG5cdFx0Zm9yIGogaW4gcmFuZ2UgTlxyXG5cdFx0XHRmb3IgayBpbiByYW5nZSBOXHJcblx0XHRcdFx0cHVzaCgpXHJcblx0XHRcdFx0dHJhbnNsYXRlIFNJWkUqKDAuNStpLU4vMiksU0laRSooMC41K2otTi8yKSxTSVpFKigwLjUray1OLzIpXHJcblx0XHRcdFx0aWYgY2FsYygpXHJcblx0XHRcdFx0XHRpbmRleCA9IE4qTiprK04qaitpXHJcblx0XHRcdFx0XHR0ZXh0dXJlIHBnW2luZGV4XVxyXG5cdFx0XHRcdFx0Ym94IFNJWkUsU0laRSxTSVpFXHJcblx0XHRcdFx0ZWxzZVxyXG5cdFx0XHRcdFx0dGV4dHVyZSBwZ1tOKk4qTi0xXVxyXG5cdFx0XHRcdFx0Ym94IDIsMiwyXHJcblx0XHRcdFx0cG9wKClcclxuXHJcbnRhYmxlQ2xlYXIgPSAtPiAkKFwiI3RhYmVsbCB0clwiKS5yZW1vdmUoKVxyXG5cclxudGFibGVBcHBlbmQgPSAodCwgYSwgYikgLT5cclxuXHRyb3cgPSB0Lmluc2VydFJvdyAtMVxyXG5cdGNlbGwxID0gcm93Lmluc2VydENlbGwgLTFcclxuXHRjZWxsMiA9IHJvdy5pbnNlcnRDZWxsIC0xXHJcblx0Y2VsbDEuaW5uZXJIVE1MID0gYVxyXG5cdGNlbGwyLmlubmVySFRNTCA9IGJcclxuIl19
//# sourceURL=C:\Lab\2017\052-p5Forth3D\coffee\sketch.coffee