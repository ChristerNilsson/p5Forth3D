// Generated by CoffeeScript 1.11.1
var Button, NormalButton, Settings, btni, btnj, btnk, btnt, buildCommands, calc, cmd0, cmd1, cmd2, cmd3, codechange, digit, displayDebug, draw, evaluate, gcd, i, j, k, lastX, lastY, linkAppend, loadSettings, mouseDragged, mousePressed, rstack, saveCanvasCount, settings, setup, showError, showStack, stack, standard, t, tableAppend, tableClear, timestamp, trace, vinkelX, vinkelY, words,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

Settings = (function() {
  function Settings() {
    this.get = {};
  }

  Settings.prototype.load = function(name, value) {
    var v;
    v = localStorage["Forth3D/" + name];
    return this.get[name] = v != null ? v : value;
  };

  Settings.prototype.loadInt = function(name, value) {
    var v;
    v = int(localStorage["Forth3D/" + name]);
    return this.get[name] = v != null ? v : value;
  };

  Settings.prototype.set = function(name, value) {
    localStorage["Forth3D/" + name] = value;
    return this.get[name] = value;
  };

  return Settings;

})();

Button = (function() {
  function Button(x, y, w, h, txt, lst1, val, action) {
    this.lst = lst1;
    this.action = action;
    this.index = this.lst.indexOf(val);
    this.button1 = createButton(txt);
    this.button1.position(x, y);
    this.button1.size(w, h);
    this.button2 = createButton(this.value());
    this.button2.position(x + w, y);
    this.button2.size(w, h);
    this.button1.mousePressed((function(_this) {
      return function() {
        _this.index = modulo(_this.index - 1, _this.lst.length);
        _this.button2.html(_this.value());
        return _this.action();
      };
    })(this));
    this.button2.mousePressed((function(_this) {
      return function() {
        _this.index = modulo(_this.index + 1, _this.lst.length);
        _this.button2.html(_this.value());
        return _this.action();
      };
    })(this));
  }

  Button.prototype.value = function() {
    return this.lst[this.index];
  };

  Button.prototype.setLst = function(lst) {
    this.lst = lst;
    if (this.index >= this.lst.length) {
      this.index = this.lst.length - 1;
      return this.button2.html(this.value());
    }
  };

  Button.prototype.hide = function() {
    this.button1.hide();
    return this.button2.hide();
  };

  Button.prototype.show = function() {
    this.button1.show();
    return this.button2.show();
  };

  return Button;

})();

NormalButton = (function() {
  function NormalButton(x, y, w, h, txt, action) {
    this.action = action;
    this.button = createButton(txt);
    this.button.position(x, y);
    this.button.size(w, h);
    this.button.mousePressed((function(_this) {
      return function() {
        return _this.action();
      };
    })(this));
  }

  return NormalButton;

})();

vinkelX = 90;

vinkelY = 0;

lastX = 0;

lastY = 0;

cmd0 = {};

cmd1 = {};

cmd2 = {};

cmd3 = {};

stack = [];

rstack = [];

timestamp = 0;

words = {};

saveCanvasCount = 0;

settings = new Settings;

i = 0;

j = 0;

k = 0;

t = 0;

btni = null;

btnj = null;

btnk = null;

btnt = null;

codechange = function(textarea) {
  settings.set('code', textarea.value);
  return trace();
};

loadSettings = function() {
  settings.loadInt('font', 32);
  settings.loadInt('n', 3);
  settings.loadInt('fps', 10);
  settings.loadInt('i', 0);
  settings.loadInt('j', 0);
  settings.loadInt('k', 0);
  settings.loadInt('t', 0);
  settings.loadInt('SIZE', 400 / settings.get.n);
  settings.load('code', '5 bitijk + + 3 =');
  settings.load('fig', 'sphere');
  settings.load('grid', 'yes');
  settings.load('rotate', 'yes');
  settings.load('debug', 'no');
  return settings.load('scaling', '1.0');
};

trace = function() {
  tableClear();
  tableAppend(tabell, 'command', 'stack');
  i = btni.value();
  j = btnj.value();
  k = btnk.value();
  return calc(true);
};

linkAppend = function(t, link, text) {
  var cell1, d, dd, row, s;
  d = function(s) {
    return "'" + s + "'";
  };
  dd = function(s) {
    return '"' + s + '"';
  };
  row = t.insertRow(-1);
  cell1 = row.insertCell(-1);
  s = '<a href=' + d(link);
  s += ' target=' + d('_blank');
  s += ' onmouseover=' + d('this.style.color=' + dd('yellow') + ';');
  s += ' onmouseout=' + d('this.style.color=' + dd('black') + ';');
  s += '>';
  s += text;
  s += '</a>';
  return cell1.innerHTML = s;
};

buildCommands = function() {
  cmd0['i'] = (function(_this) {
    return function() {
      return [i];
    };
  })(this);
  cmd0['j'] = (function(_this) {
    return function() {
      return [j];
    };
  })(this);
  cmd0['k'] = (function(_this) {
    return function() {
      return [k];
    };
  })(this);
  cmd0['t'] = (function(_this) {
    return function() {
      return [t];
    };
  })(this);
  cmd0['pop'] = (function(_this) {
    return function() {
      return [rstack.pop()];
    };
  })(this);
  cmd1['push'] = (function(_this) {
    return function(a) {
      rstack.push(a);
      return [];
    };
  })(this);
  cmd1['drop'] = (function(_this) {
    return function(a) {
      return [];
    };
  })(this);
  cmd1['dup'] = (function(_this) {
    return function(a) {
      return [a, a];
    };
  })(this);
  cmd1['not'] = (function(_this) {
    return function(a) {
      return [digit(a === 0)];
    };
  })(this);
  cmd1['inv'] = (function(_this) {
    return function(a) {
      return [1 / a];
    };
  })(this);
  cmd1['chs'] = (function(_this) {
    return function(a) {
      return [-a];
    };
  })(this);
  cmd1['sign'] = (function(_this) {
    return function(a) {
      return [Math.sign(a)];
    };
  })(this);
  cmd1['abs'] = (function(_this) {
    return function(a) {
      return [abs(a)];
    };
  })(this);
  cmd1['sqrt'] = (function(_this) {
    return function(a) {
      return [sqrt(a)];
    };
  })(this);
  cmd1['rot'] = (function(_this) {
    return function(a) {
      return [a];
    };
  })(this);
  cmd1['~'] = (function(_this) {
    return function(a) {
      return [~a];
    };
  })(this);
  cmd1['biti'] = (function(_this) {
    return function(a) {
      return [a >> i & 1];
    };
  })(this);
  cmd1['bitj'] = (function(_this) {
    return function(a) {
      return [a >> j & 1];
    };
  })(this);
  cmd1['bitk'] = (function(_this) {
    return function(a) {
      return [a >> k & 1];
    };
  })(this);
  cmd1['bitij'] = (function(_this) {
    return function(a) {
      return [a >> i & 1, a >> j & 1];
    };
  })(this);
  cmd1['bitik'] = (function(_this) {
    return function(a) {
      return [a >> i & 1, a >> k & 1];
    };
  })(this);
  cmd1['bitjk'] = (function(_this) {
    return function(a) {
      return [a >> j & 1, a >> k & 1];
    };
  })(this);
  cmd1['bitijk'] = (function(_this) {
    return function(a) {
      return [a >> i & 1, a >> j & 1, a >> k & 1];
    };
  })(this);
  cmd2['swap'] = (function(_this) {
    return function(a, b) {
      return [a, b];
    };
  })(this);
  cmd2['<'] = (function(_this) {
    return function(a, b) {
      return [digit(b < a)];
    };
  })(this);
  cmd2['>'] = (function(_this) {
    return function(a, b) {
      return [digit(b > a)];
    };
  })(this);
  cmd2['='] = (function(_this) {
    return function(a, b) {
      return [digit(b === a)];
    };
  })(this);
  cmd2['<='] = (function(_this) {
    return function(a, b) {
      return [digit(b <= a)];
    };
  })(this);
  cmd2['>='] = (function(_this) {
    return function(a, b) {
      return [digit(b >= a)];
    };
  })(this);
  cmd2['<>'] = (function(_this) {
    return function(a, b) {
      return [digit(b !== a)];
    };
  })(this);
  cmd2['+'] = (function(_this) {
    return function(a, b) {
      return [b + a];
    };
  })(this);
  cmd2['-'] = (function(_this) {
    return function(a, b) {
      return [b - a];
    };
  })(this);
  cmd2['*'] = (function(_this) {
    return function(a, b) {
      return [b * a];
    };
  })(this);
  cmd2['**'] = (function(_this) {
    return function(a, b) {
      return [Math.pow(b, a)];
    };
  })(this);
  cmd2['/'] = (function(_this) {
    return function(a, b) {
      return [b / a];
    };
  })(this);
  cmd2['//'] = (function(_this) {
    return function(a, b) {
      return [Math.floor(b / a)];
    };
  })(this);
  cmd2['%'] = (function(_this) {
    return function(a, b) {
      return [b % a];
    };
  })(this);
  cmd2['%%'] = (function(_this) {
    return function(a, b) {
      return [modulo(b, a)];
    };
  })(this);
  cmd2['gcd'] = (function(_this) {
    return function(a, b) {
      return [gcd(a, b)];
    };
  })(this);
  cmd2['bit'] = (function(_this) {
    return function(a, b) {
      return [a >> b & 1];
    };
  })(this);
  cmd2['&'] = (function(_this) {
    return function(a, b) {
      return [b & a];
    };
  })(this);
  cmd2['|'] = (function(_this) {
    return function(a, b) {
      return [b | a];
    };
  })(this);
  cmd2['^'] = (function(_this) {
    return function(a, b) {
      return [b ^ a];
    };
  })(this);
  cmd2['>>'] = (function(_this) {
    return function(a, b) {
      return [b >> a];
    };
  })(this);
  cmd2['<<'] = (function(_this) {
    return function(a, b) {
      return [b << a];
    };
  })(this);
  cmd2['and'] = (function(_this) {
    return function(a, b) {
      return [digit(b !== 0 && a !== 0)];
    };
  })(this);
  cmd2['or'] = (function(_this) {
    return function(a, b) {
      return [digit(b !== 0 || a !== 0)];
    };
  })(this);
  cmd2['xor'] = (function(_this) {
    return function(a, b) {
      return [digit(b + a === 1)];
    };
  })(this);
  cmd2['2dup'] = (function(_this) {
    return function(a, b) {
      return [b, a, b, a];
    };
  })(this);
  cmd3['rot'] = (function(_this) {
    return function(c, b, a) {
      return [b, c, a];
    };
  })(this);
  return cmd3['-rot'] = (function(_this) {
    return function(c, b, a) {
      return [c, a, b];
    };
  })(this);
};

standard = function(name, value) {
  if (localStorage[name] != null) {
    return localStorage[name];
  } else {
    return value;
  }
};

setup = function() {
  var c, code, p1, p2, p3, tabell;
  c = createCanvas(800, 800, WEBGL);
  c.parent('canvas');
  buildCommands();
  code = $('#code');
  tabell = $('#tabell');
  p1 = $('#p1');
  p2 = $('#p2');
  p3 = $('#p3');
  loadSettings();
  code.val(settings.get.code);
  document.getElementById("code").style.fontSize = settings.get.font + 'px';
  linkAppend(links, "examples2x2x2.html", "Examples 2x2x2");
  linkAppend(links, "examples3x3x3.html", "Examples 3x3x3");
  linkAppend(links, "examples.html", "Examples");
  frameRate(settings.get.fps);
  texture(createGraphics(1, 1));
  new Button(0, 0, 50, 20, 'font', range(16, 40, 2), settings.get.font, function() {
    settings.set('font', this.value());
    return document.getElementById("code").style.fontSize = settings.get.font + 'px';
  });
  new Button(0, 20, 50, 20, 'size', '0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0'.split(' '), settings.get.scaling, function() {
    return settings.set('scaling', this.lst[this.index]);
  });
  new Button(0, 40, 50, 20, 'n', range(2, 28), settings.get.n, function() {
    settings.set('n', int(this.value()));
    btni.setLst(range(settings.get.n));
    btnj.setLst(range(settings.get.n));
    btnk.setLst(range(settings.get.n));
    return settings.set('SIZE', int(400 / settings.get.n));
  });
  new Button(0, 60, 50, 20, 'fps', range(26), settings.get.fps, function() {
    settings.set('fps', int(this.value()));
    return frameRate(settings.get.fps);
  });
  new Button(120, 0, 50, 20, 'figure', 'sphere box'.split(' '), settings.get.fig, function() {
    settings.set('fig', this.value());
    return trace();
  });
  new Button(120, 20, 50, 20, 'rotate', 'yes no'.split(' '), settings.get.rotate, function() {
    settings.set('rotate', this.value());
    return trace();
  });
  new Button(120, 40, 50, 20, 'grid', 'yes no'.split(' '), settings.get.grid, function() {
    settings.set('grid', this.value());
    return trace();
  });
  new Button(120, 60, 50, 20, 'debug', 'yes no'.split(' '), settings.get.debug, function() {
    settings.set('debug', this.value());
    return displayDebug();
  });
  new NormalButton(120, 80, 100, 20, 'snapshot', function() {
    return saveCanvasCount++;
  });
  btni = new Button(380, 0, 50, 20, 'i', range(settings.get.n), settings.get.i, function() {
    settings.set('i', int(this.value()));
    return trace();
  });
  btnj = new Button(380, 20, 50, 20, 'j', range(settings.get.n), settings.get.j, function() {
    settings.set('j', int(this.value()));
    return trace();
  });
  btnk = new Button(380, 40, 50, 20, 'k', range(settings.get.n), settings.get.k, function() {
    settings.set('k', int(this.value()));
    return trace();
  });
  btnt = new Button(380, 60, 50, 20, 't', range(10), settings.get.t, function() {
    settings.set('t', int(this.value()));
    return trace();
  });
  btni.button1.style('color', 'white');
  btnj.button1.style('color', 'white');
  btnk.button1.style('color', 'white');
  btni.button1.style('background-color', 'red');
  btnj.button1.style('background-color', 'green');
  btnk.button1.style('background-color', 'blue');
  return displayDebug();
};

displayDebug = (function(_this) {
  return function() {
    var control;
    if (settings.get.debug === 'yes') {
      btni.show();
    } else {
      btni.hide();
    }
    if (settings.get.debug === 'yes') {
      btnj.show();
    } else {
      btnj.hide();
    }
    if (settings.get.debug === 'yes') {
      btnk.show();
    } else {
      btnk.hide();
    }
    if (settings.get.debug === 'yes') {
      btnt.show();
    } else {
      btnt.hide();
    }
    control = $('#tabell');
    if (settings.get.debug === 'yes') {
      return control.show();
    } else {
      return control.hide();
    }
  };
})(this);

digit = function(bool) {
  if (bool) {
    return 1;
  } else {
    return 0;
  }
};

showStack = function(level, cmd) {
  return tableAppend(tabell, level + cmd, stack.join(' '));
};

showError = function(e) {
  return tableAppend(tabell, e[0], e[1], '#FF0000');
};

gcd = function(x, y) {
  if (y === 0) {
    return x;
  } else {
    return gcd(y, x % y);
  }
};

mousePressed = function() {
  if ((0 < mouseX && mouseX < width) && (0 < mouseY && mouseY < height)) {
    lastX = mouseX;
    return lastY = mouseY;
  }
};

mouseDragged = function() {
  var dx, dy;
  if ((0 < mouseX && mouseX < width) && (0 < mouseY && mouseY < height)) {
    dx = mouseX - lastX;
    dy = mouseY - lastY;
    vinkelX += dx / 4;
    vinkelY += dy / 4;
    lastX = mouseX;
    return lastY = mouseY;
  }
};

evaluate = function(traceFlag, line, level) {
  var arr, cmd, l, len1, nr, results;
  if (level == null) {
    level = '';
  }
  arr = line.split(' ');
  results = [];
  for (l = 0, len1 = arr.length; l < len1; l++) {
    cmd = arr[l];
    if (cmd === '') {

    } else if (words[cmd] != null) {
      if (level.indexOf('.' + cmd + '.') !== -1) {
        throw [level + cmd, 'Recursion not allowed'];
      }
      results.push(evaluate(traceFlag, words[cmd], level + cmd + '.'));
    } else if (cmd3[cmd] != null) {
      if (stack.length < 3) {
        throw [level + cmd, 'Stack Underflow'];
      }
      stack = stack.concat(cmd3[cmd](stack.pop(), stack.pop(), stack.pop()));
      if (traceFlag) {
        results.push(showStack(level, cmd));
      } else {
        results.push(void 0);
      }
    } else if (cmd2[cmd] != null) {
      if (stack.length < 2) {
        throw [level + cmd, 'Stack Underflow'];
      }
      stack = stack.concat(cmd2[cmd](stack.pop(), stack.pop()));
      if (traceFlag) {
        results.push(showStack(level, cmd));
      } else {
        results.push(void 0);
      }
    } else if (cmd1[cmd] != null) {
      if (stack.length < 1) {
        throw [level + cmd, 'Stack Underflow'];
      }
      stack = stack.concat(cmd1[cmd](cmd === 'rot' ? stack.shift() : stack.pop()));
      if (traceFlag) {
        results.push(showStack(level, cmd));
      } else {
        results.push(void 0);
      }
    } else if (cmd0[cmd] != null) {
      stack = stack.concat(cmd0[cmd]());
      if (traceFlag) {
        results.push(showStack(level, cmd));
      } else {
        results.push(void 0);
      }
    } else {
      nr = parseFloat(cmd);
      if (_.isNumber(nr) && !_.isNaN(nr)) {
        stack.push(nr);
        if (traceFlag) {
          results.push(showStack(level, cmd));
        } else {
          results.push(void 0);
        }
      } else {
        throw [level + cmd, 'Unknown Word'];
      }
    }
  }
  return results;
};

calc = function(traceFlag) {
  var arr, cmd, defWords, e, l, len1, state, stateStack;
  if (traceFlag == null) {
    traceFlag = false;
  }
  words = {};
  stack = [];
  rstack = [];
  arr = code.value.replace(/\n/g, ' ').split(' ');
  state = 'normal';
  defWords = [];
  stateStack = [];
  try {
    for (l = 0, len1 = arr.length; l < len1; l++) {
      cmd = arr[l];
      if (cmd === '(') {
        stateStack.push('(');
      }
      if (cmd === '') {
        continue;
      }
      if (cmd === ':') {
        stateStack.push(':');
      }
      if (_.last(stateStack) === '(') {
        if (cmd === ')') {
          stateStack.pop();
        }
      } else if (_.last(stateStack) === ':') {
        defWords.push(cmd);
        if (cmd === ';') {
          if (defWords.length === 3) {
            delete words[defWords[0]];
          } else {
            words[defWords[1]] = defWords.slice(2, -1).join(' ');
          }
          defWords = [];
          stateStack.pop();
        }
      } else {
        evaluate(traceFlag, cmd);
      }
    }
    return stack.length === 1 && 0 !== _.last(stack);
  } catch (error) {
    e = error;
    if (traceFlag) {
      return showError(e);
    }
  }
};

draw = function() {
  var arr, count, drawFigure, f, item, l, len1, len2, len3, locX, locY, m, n, ref, ref1, ref2, scaling, showAxes, x, y, z;
  drawFigure = (function(_this) {
    return function(s) {
      var u;
      s = _.max([int(s), 5]);
      u = int(s / 2);
      if (settings.get.fig === 'sphere') {
        return sphere(u, u, u);
      } else {
        return box(s, s, s);
      }
    };
  })(this);
  showAxes = (function(_this) {
    return function() {
      var i0, j0, k0, len, size, x, y, z;
      if (settings.get.debug === 'no') {
        return;
      }
      i0 = settings.get.i;
      j0 = settings.get.j;
      k0 = settings.get.k;
      size = settings.get.SIZE;
      len = size * (settings.get.n - 1);
      x = size * (0.5 + i0 - settings.get.n / 2);
      y = size * (0.5 + j0 - settings.get.n / 2);
      z = size * (0.5 + k0 - settings.get.n / 2);
      translate(x, y, z);
      push();
      translate(-x, 0, 0);
      rotateZ(radians(90));
      specularMaterial(255, 0, 0);
      cylinder(size / 50, len);
      pop();
      push();
      translate(0, -y, 0);
      specularMaterial(0, 255, 0);
      cylinder(size / 50, len);
      pop();
      push();
      translate(0, 0, -z);
      rotateX(radians(90));
      specularMaterial(0, 0, 255);
      cylinder(size / 50, len);
      return pop();
    };
  })(this);
  if (settings.get.fps === 0) {
    return;
  }
  trace();
  bg(0.5);
  if ((0 < mouseX && mouseX < width) && (0 < mouseY && mouseY < height)) {
    locX = 2 * mouseX / width - 1;
    locY = 1 - 2 * mouseY / height;
  } else {
    locX = -(1 - 2 * lastX / height);
    locY = -(2 * lastY / width - 1);
  }
  if (settings.get.rotate === 'yes') {
    vinkelY += 1;
    vinkelX += 0.5;
  }
  rotateX(radians(vinkelY));
  rotateY(radians(vinkelX));
  ambientLight(128, 128, 128);
  pointLight(255, 255, 255, locX, locY, 0.25);
  t = frameCount;
  count = 0;
  scaling = parseFloat(settings.get.scaling);
  ref = range(settings.get.n);
  for (l = 0, len1 = ref.length; l < len1; l++) {
    i = ref[l];
    ref1 = range(settings.get.n);
    for (m = 0, len2 = ref1.length; m < len2; m++) {
      j = ref1[m];
      ref2 = range(settings.get.n);
      for (n = 0, len3 = ref2.length; n < len3; n++) {
        k = ref2[n];
        push();
        x = settings.get.SIZE * (0.5 + i - settings.get.n / 2);
        y = settings.get.SIZE * (0.5 + j - settings.get.n / 2);
        z = settings.get.SIZE * (0.5 + k - settings.get.n / 2);
        translate(x, y, z);
        f = 255 / (settings.get.n - 1);
        specularMaterial(f * i, f * j, f * k);
        if (calc()) {
          drawFigure(scaling * settings.get.SIZE);
          count++;
        } else {
          if (settings.get.grid === 'yes') {
            drawFigure(scaling * 2 * settings.get.SIZE / 10);
          }
        }
        pop();
      }
    }
  }
  showAxes();
  arr = code.value.replace(/\n/g, ' ').split(' ');
  arr = (function() {
    var len4, o, results;
    results = [];
    for (o = 0, len4 = arr.length; o < len4; o++) {
      item = arr[o];
      if (item.length > 0) {
        results.push(item);
      }
    }
    return results;
  })();
  p1.innerHTML = 'Words: ' + arr.length;
  p2.innerHTML = 'Figures: ' + count;
  if (millis() > timestamp) {
    p3.innerHTML = "FPS: " + (nf(frameRate(), 0, 1));
    timestamp = millis() + 1000;
  }
  if (saveCanvasCount > 0) {
    saveCanvas('p5Forth3D', 'png');
    return saveCanvasCount--;
  }
};

tableClear = function() {
  return $("#tabell tr").remove();
};

tableAppend = function(t, a, b, col) {
  var cell1, cell2, row;
  if (col == null) {
    col = '#80808000';
  }
  row = t.insertRow(-1);
  cell1 = row.insertCell(-1);
  cell2 = row.insertCell(-1);
  cell1.innerHTML = a;
  cell2.innerHTML = b;
  cell1.style.backgroundColor = '#C0C0C000';
  cell2.style.color = '#FFFFFF';
  cell2.style.backgroundColor = col;
  return cell2.style.textAlign = 'right';
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\github\p5Forth3D\coffee\sketch.coffee