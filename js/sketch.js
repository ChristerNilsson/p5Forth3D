// Generated by CoffeeScript 1.11.1
var N, SIZE, buildCommands, calc, cmd0, cmd1, cmd2, digit, draw, evaluate, fillSelect, i, j, k, lightX, lightY, mousePressed, pg, sel1click, sel2click, sel3click, sel4click, sel5click, sel6click, sel7click, sel8click, setup, showError, showStack, stack, t, tableAppend, tableClear, timestamp, trace, words, xVinkel, yVinkel,
  modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

N = 10;

SIZE = 250 / N;

pg = Array(N * N * N);

lightX = 0;

lightY = 0;

cmd0 = {};

cmd1 = {};

cmd2 = {};

stack = [];

i = 0;

j = 0;

k = 0;

t = 0;

xVinkel = 0;

yVinkel = 0;

timestamp = 0;

words = {};

fillSelect = function(sel, arr) {
  var key, l, len, results;
  sel.empty();
  results = [];
  for (l = 0, len = arr.length; l < len; l++) {
    key = arr[l];
    results.push(sel.append($("<option>").attr('value', key).text(key)));
  }
  return results;
};

sel1click = function(sel) {};

sel2click = function(sel) {};

sel3click = function(sel) {
  return frameRate(int(sel.value));
};

sel4click = function(sel) {};

sel5click = function(sel) {
  return trace();
};

sel6click = function(sel) {
  return trace();
};

sel7click = function(sel) {
  return trace();
};

sel8click = function(sel) {
  return trace();
};

trace = function() {
  tableClear();
  tableAppend(tabell, 'command', 'stack');
  i = parseInt(sel5.value);
  j = parseInt(sel6.value);
  k = parseInt(sel7.value);
  t = parseInt(sel8.value);
  return calc(true);
};

buildCommands = function() {
  cmd0['i'] = (function(_this) {
    return function() {
      return stack.push(i);
    };
  })(this);
  cmd0['j'] = (function(_this) {
    return function() {
      return stack.push(j);
    };
  })(this);
  cmd0['k'] = (function(_this) {
    return function() {
      return stack.push(k);
    };
  })(this);
  cmd0['t'] = (function(_this) {
    return function() {
      return stack.push(t);
    };
  })(this);
  cmd0['drop'] = (function(_this) {
    return function() {
      return stack.pop();
    };
  })(this);
  cmd1['dup'] = (function(_this) {
    return function(a) {
      return stack = stack.concat([a, a]);
    };
  })(this);
  cmd1['not'] = (function(_this) {
    return function(a) {
      return stack.push(digit(a === 0));
    };
  })(this);
  cmd1['inv'] = (function(_this) {
    return function(a) {
      return stack.push(1 / a);
    };
  })(this);
  cmd1['chs'] = (function(_this) {
    return function(a) {
      return stack.push(-a);
    };
  })(this);
  cmd1['sign'] = (function(_this) {
    return function(a) {
      return stack.push(Math.sign(a));
    };
  })(this);
  cmd1['abs'] = (function(_this) {
    return function(a) {
      return stack.push(abs(a));
    };
  })(this);
  cmd1['sqrt'] = (function(_this) {
    return function(a) {
      return stack.push(sqrt(a));
    };
  })(this);
  cmd1['rot'] = (function(_this) {
    return function(a) {
      return stack.push(a);
    };
  })(this);
  cmd1['~'] = (function(_this) {
    return function(a) {
      return stack.push(~a);
    };
  })(this);
  cmd1['biti'] = (function(_this) {
    return function(a) {
      return stack.push(a >> i & 1);
    };
  })(this);
  cmd1['bitj'] = (function(_this) {
    return function(a) {
      return stack.push(a >> j & 1);
    };
  })(this);
  cmd1['bitk'] = (function(_this) {
    return function(a) {
      return stack.push(a >> k & 1);
    };
  })(this);
  cmd1['bitij'] = (function(_this) {
    return function(a) {
      return stack = stack.concat([a >> i & 1, a >> j & 1]);
    };
  })(this);
  cmd1['bitik'] = (function(_this) {
    return function(a) {
      return stack = stack.concat([a >> i & 1, a >> k & 1]);
    };
  })(this);
  cmd1['bitjk'] = (function(_this) {
    return function(a) {
      return stack = stack.concat([a >> j & 1, a >> k & 1]);
    };
  })(this);
  cmd1['bitijk'] = (function(_this) {
    return function(a) {
      return stack = stack.concat([a >> i & 1, a >> j & 1, a >> k & 1]);
    };
  })(this);
  cmd2['swap'] = (function(_this) {
    return function(a, b) {
      return stack = stack.concat([a, b]);
    };
  })(this);
  cmd2['<'] = (function(_this) {
    return function(a, b) {
      return stack.push(digit(b < a));
    };
  })(this);
  cmd2['>'] = (function(_this) {
    return function(a, b) {
      return stack.push(digit(b > a));
    };
  })(this);
  cmd2['=='] = (function(_this) {
    return function(a, b) {
      return stack.push(digit(b === a));
    };
  })(this);
  cmd2['<='] = (function(_this) {
    return function(a, b) {
      return stack.push(digit(b <= a));
    };
  })(this);
  cmd2['>='] = (function(_this) {
    return function(a, b) {
      return stack.push(digit(b >= a));
    };
  })(this);
  cmd2['!='] = (function(_this) {
    return function(a, b) {
      return stack.push(digit(b !== a));
    };
  })(this);
  cmd2['+'] = (function(_this) {
    return function(a, b) {
      return stack.push(b + a);
    };
  })(this);
  cmd2['-'] = (function(_this) {
    return function(a, b) {
      return stack.push(b - a);
    };
  })(this);
  cmd2['*'] = (function(_this) {
    return function(a, b) {
      return stack.push(b * a);
    };
  })(this);
  cmd2['**'] = (function(_this) {
    return function(a, b) {
      return stack.push(Math.pow(b, a));
    };
  })(this);
  cmd2['/'] = (function(_this) {
    return function(a, b) {
      return stack.push(b / a);
    };
  })(this);
  cmd2['//'] = (function(_this) {
    return function(a, b) {
      return stack.push(Math.floor(b / a));
    };
  })(this);
  cmd2['%'] = (function(_this) {
    return function(a, b) {
      return stack.push(b % a);
    };
  })(this);
  cmd2['%%'] = (function(_this) {
    return function(a, b) {
      return stack.push(modulo(b, a));
    };
  })(this);
  cmd2['bit'] = (function(_this) {
    return function(a, b) {
      return stack.push(b >> a & 1);
    };
  })(this);
  cmd2['&'] = (function(_this) {
    return function(a, b) {
      return stack.push(b & a);
    };
  })(this);
  cmd2['|'] = (function(_this) {
    return function(a, b) {
      return stack.push(b | a);
    };
  })(this);
  cmd2['^'] = (function(_this) {
    return function(a, b) {
      return stack.push(b ^ a);
    };
  })(this);
  cmd2['>>'] = (function(_this) {
    return function(a, b) {
      return stack.push(b >> a);
    };
  })(this);
  cmd2['<<'] = (function(_this) {
    return function(a, b) {
      return stack.push(b << a);
    };
  })(this);
  cmd2['and'] = (function(_this) {
    return function(a, b) {
      return stack.push(digit(b !== 0 && a !== 0));
    };
  })(this);
  cmd2['or'] = (function(_this) {
    return function(a, b) {
      return stack.push(digit(b !== 0 || a !== 0));
    };
  })(this);
  return cmd2['xor'] = (function(_this) {
    return function(a, b) {
      return stack.push(digit(b + a === 1));
    };
  })(this);
};

setup = function() {
  var c, code, f, index, l, len, p1, p2, p3, ref, results, sel1, sel2, sel3, sel4, sel5, sel6, sel7, sel8, sel9, tabell;
  c = createCanvas(500, 500, WEBGL);
  c.parent('canvas');
  buildCommands();
  code = $('#code');
  sel1 = $('#sel1');
  sel2 = $('#sel2');
  sel3 = $('#sel3');
  sel4 = $('#sel4');
  sel5 = $('#sel5');
  sel6 = $('#sel6');
  sel7 = $('#sel7');
  sel8 = $('#sel8');
  sel9 = $('#sel9');
  tabell = $('#tabell');
  p1 = $('#p1');
  p2 = $('#p2');
  p3 = $('#p3');
  fillSelect(sel1, ['free'].concat(range(0, 360, 15)));
  fillSelect(sel2, ['free'].concat(range(0, 360, 15)));
  fillSelect(sel3, range(1, 26));
  fillSelect(sel4, range(25));
  fillSelect(sel5, range(10));
  fillSelect(sel6, range(10));
  fillSelect(sel7, range(10));
  fillSelect(sel8, range(10));
  fillSelect(sel9, [1, 2, 4, 8, 16, 32, 64, 128, 256, 512]);
  frameRate(10);
  sel1.val("free").change();
  sel2.val("free").change();
  sel3.val("10").change();
  sel4.val("10").change();
  sel5.val("0").change();
  sel6.val("0").change();
  sel7.val("0").change();
  sel8.val("0").change();
  trace();
  f = 255 / (N - 1);
  ref = range(N);
  results = [];
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    results.push((function() {
      var len1, m, ref1, results1;
      ref1 = range(N);
      results1 = [];
      for (m = 0, len1 = ref1.length; m < len1; m++) {
        j = ref1[m];
        results1.push((function() {
          var len2, n, ref2, results2;
          ref2 = range(N);
          results2 = [];
          for (n = 0, len2 = ref2.length; n < len2; n++) {
            k = ref2[n];
            index = N * N * k + N * j + i;
            pg[index] = createGraphics(1, 1);
            results2.push(pg[index].background(f * i, f * j, f * k));
          }
          return results2;
        })());
      }
      return results1;
    })());
  }
  return results;
};

digit = function(bool) {
  if (bool) {
    return 1;
  } else {
    return 0;
  }
};

showStack = function(level, cmd) {
  return tableAppend(tabell, level + cmd, stack.join(' '));
};

showError = function(e) {
  return tableAppend(tabell, e[0], e[1], '#FF0000');
};

mousePressed = function() {
  var ref;
  if ((0 < mouseX && mouseX < width) && (0 < mouseY && mouseY < height)) {
    return ref = [mouseX, mouseY], lightX = ref[0], lightY = ref[1], ref;
  }
};

evaluate = function(traceFlag, line, level) {
  var arr, cmd, l, len, nr, results;
  if (level == null) {
    level = '';
  }
  arr = line.split(' ');
  results = [];
  for (l = 0, len = arr.length; l < len; l++) {
    cmd = arr[l];
    if (cmd === '') {

    } else if (words[cmd] != null) {
      if (level.indexOf('.' + cmd + '.') !== -1) {
        throw [level + cmd, 'Recursion not allowed'];
      }
      results.push(evaluate(traceFlag, words[cmd], level + cmd + '.'));
    } else if (cmd2[cmd] != null) {
      if (stack.length < 2) {
        throw [level + cmd, 'Stack Underflow'];
      }
      cmd2[cmd](stack.pop(), stack.pop());
      if (traceFlag) {
        results.push(showStack(level, cmd));
      } else {
        results.push(void 0);
      }
    } else if (cmd1[cmd] != null) {
      if (stack.length < 1) {
        throw [level + cmd, 'Stack Underflow'];
      }
      cmd1[cmd](cmd === 'rot' ? stack.shift() : stack.pop());
      if (traceFlag) {
        results.push(showStack(level, cmd));
      } else {
        results.push(void 0);
      }
    } else if (cmd0[cmd] != null) {
      cmd0[cmd]();
      if (traceFlag) {
        results.push(showStack(level, cmd));
      } else {
        results.push(void 0);
      }
    } else {
      nr = parseFloat(cmd);
      if (_.isNumber(nr) && !_.isNaN(nr)) {
        stack.push(nr);
        if (traceFlag) {
          results.push(showStack(level, cmd));
        } else {
          results.push(void 0);
        }
      } else {
        throw [level + cmd, 'Unknown Word'];
      }
    }
  }
  return results;
};

calc = function(traceFlag) {
  var arr, e, l, len, line, lines;
  if (traceFlag == null) {
    traceFlag = false;
  }
  stack = [];
  lines = code.value.split("\n");
  try {
    for (l = 0, len = lines.length; l < len; l++) {
      line = lines[l];
      if (0 === line.indexOf(':')) {
        arr = line.split(' ');
        if (arr.length === 3 && arr[2] === ';') {
          delete words[arr[1]];
        } else {
          words[arr[1]] = arr.slice(2, -1).join(' ');
        }
      } else {
        evaluate(traceFlag, line);
      }
    }
    return 0 !== _.last(stack);
  } catch (error) {
    e = error;
    if (traceFlag) {
      return showError(e);
    }
  }
};

draw = function() {
  var count, index, l, len, len1, len2, locX, locY, m, n, ref, ref1, ref2;
  if (sel4.value === '0') {
    return;
  }
  bg(0.5);
  if ((0 < mouseX && mouseX < width) && (0 < mouseY && mouseY < height)) {
    locY = 1 - 2 * mouseY / height;
    locX = 2 * mouseX / width - 1;
  } else {
    locY = 1 - 2 * lightY / height;
    locX = 2 * lightX / width - 1;
  }
  pointLight(255, 255, 255, locX, locY, 0);
  if (sel1.value === 'free') {
    yVinkel += sel4.value / 500;
    yVinkel %= TWO_PI;
    rotateY(yVinkel);
  } else {
    rotateY(radians(sel1.value));
  }
  if (sel2.value === 'free') {
    xVinkel += sel4.value / 500;
    xVinkel %= TWO_PI;
    rotateX(xVinkel);
  } else {
    rotateX(radians(sel2.value));
  }
  t = frameCount;
  count = 0;
  ref = range(N);
  for (l = 0, len = ref.length; l < len; l++) {
    i = ref[l];
    ref1 = range(N);
    for (m = 0, len1 = ref1.length; m < len1; m++) {
      j = ref1[m];
      ref2 = range(N);
      for (n = 0, len2 = ref2.length; n < len2; n++) {
        k = ref2[n];
        push();
        translate(SIZE * (0.5 + i - N / 2), SIZE * (0.5 + j - N / 2), SIZE * (0.5 + k - N / 2));
        if (calc()) {
          index = N * N * k + N * j + i;
          texture(pg[index]);
          box(SIZE, SIZE, SIZE);
          count++;
        } else {
          texture(pg[N * N * N - 1]);
          box(2, 2, 2);
        }
        pop();
      }
    }
  }
  p1.innerHTML = 'Words: ' + code.value.replace(/\n/g, ' ').split(' ').length;
  p2.innerHTML = 'Cubes: ' + count;
  if (millis() > timestamp) {
    p3.innerHTML = 'FPS: ' + int(frameRate());
    return timestamp = millis() + 1000;
  }
};

tableClear = function() {
  return $("#tabell tr").remove();
};

tableAppend = function(t, a, b, col) {
  var cell1, cell2, row;
  if (col == null) {
    col = '#C0C0C0';
  }
  row = t.insertRow(-1);
  cell1 = row.insertCell(-1);
  cell2 = row.insertCell(-1);
  cell1.innerHTML = a;
  cell2.innerHTML = b;
  cell1.style.backgroundColor = '#808080';
  cell2.style.backgroundColor = col;
  return cell2.style.textAlign = 'right';
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=C:\github\p5Forth3D\coffee\sketch.coffee